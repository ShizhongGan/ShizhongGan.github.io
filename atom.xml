<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>钟声</title>
  <icon>https://www.gravatar.com/avatar/fa65dd480df94b0c4abae5c60b4365d4</icon>
  <subtitle>甘士忠个人博客</subtitle>
  <link href="http://shizhonggan.github.io/atom.xml" rel="self"/>
  
  <link href="http://shizhonggan.github.io/"/>
  <updated>2021-04-19T08:40:33.359Z</updated>
  <id>http://shizhonggan.github.io/</id>
  
  <author>
    <name>甘士忠</name>
    <email>gan_shizhong@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MYSQL游标使用方法</title>
    <link href="http://shizhonggan.github.io/2021/04/19/SQL/mysql_cursor/"/>
    <id>http://shizhonggan.github.io/2021/04/19/SQL/mysql_cursor/</id>
    <published>2021-04-19T03:18:43.247Z</published>
    <updated>2021-04-19T08:40:33.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="游标"><a class="markdownIt-Anchor" href="#游标"></a> 游标</h2><p>游标的特性</p><ul><li>不敏感：数据库可以选择不复制结果集</li><li>只读</li><li>不滚动：游标只能向一方向前进，并且不可以跳过任何一行数据</li></ul><p>游标的优点</p><ul><li>游标是针对行操作的，对从数据库中 select 查询得到的结果集的 每一行可以</li><li>进行分开的独立的相同或者不相同的操作，是一种分离的思想。</li></ul><p>游标的缺点</p><ul><li>性能不高</li><li>只能一行一行操作</li><li>使用游标会产生死锁，造成内存开销大</li></ul><p>游标的适用场景</p><ul><li>存储过程</li><li>函数</li><li>触发器</li><li>事件</li></ul><h2 id="游标使用方法"><a class="markdownIt-Anchor" href="#游标使用方法"></a> 游标使用方法</h2><p>游标五步法：</p><ul><li>一、声明一个游标:<ul><li>DECLARE cursor_name CURSOR FOR select_statement 这个语句声明一个游标。也可以在子程序中定义多个游标，一个块中的每一个游标必须命名唯一。声明游标后也是单条操作的。</li></ul></li><li>二、打开定义的游标:<ul><li>OPEN cursor_name 这个语句打开先前声明的游标。</li></ul></li><li>三、获得下一行数据:<ul><li>FETCH cursor_name INTO var_name [, var_name] … 这个语句用指定的打开游标读取下一行（如果有下一行的话），并且前进游标指针至该行。</li></ul></li><li>四、需要执行的语句(增删改查):这里视具体情况而定</li><li>五、释放游标:<ul><li>CLOSE cursor_name 这个语句关闭先前打开的游标，注意，用完后必须关闭。</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> UpdateImgURL;</span><br><span class="line"><span class="comment">/***游标***/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> UpdateImgURL()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="comment">-- 遍历数据结束标志</span></span><br><span class="line"><span class="keyword">DECLARE</span> Done <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> Imgurl <span class="type">CHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> &quot;&quot;;</span><br><span class="line"><span class="comment">-- 游标</span></span><br><span class="line"><span class="keyword">DECLARE</span> RS <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> imgurl <span class="keyword">FROM</span> weixin_linkface_userinfo ;</span><br><span class="line"><span class="comment">-- 异常处理</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">SET</span> Done <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 打开游标</span></span><br><span class="line"><span class="keyword">OPEN</span> RS;</span><br><span class="line"><span class="keyword">FETCH</span> NEXT <span class="keyword">FROM</span> RS <span class="keyword">INTO</span> Imgurl;</span><br><span class="line">REPEAT</span><br><span class="line">IF <span class="keyword">NOT</span> Done <span class="keyword">THEN</span></span><br><span class="line"><span class="comment">/**update 表名 set 字段名=REPLACE (字段名,&#x27;原来的值&#x27;,&#x27;要修改的值&#x27;)  where 条件  **/</span></span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">FETCH</span> NEXT <span class="keyword">FROM</span> RS <span class="keyword">INTO</span> Imgurl;</span><br><span class="line">UNTIL Done <span class="keyword">END</span> REPEAT;</span><br><span class="line"><span class="keyword">CLOSE</span> rs;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="comment">/**执行存储过程**/</span></span><br><span class="line"><span class="keyword">CALL</span> UpdateImgURL</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="keyword">DECLARE</span>  no_more_record <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">DECLARE</span>  pID <span class="type">BIGINT</span>(<span class="number">20</span>);</span><br><span class="line"> <span class="keyword">DECLARE</span>  pValue <span class="type">DECIMAL</span>(<span class="number">15</span>,<span class="number">5</span>);</span><br><span class="line"> <span class="keyword">DECLARE</span>  cur_record <span class="keyword">CURSOR</span> <span class="keyword">FOR</span>   <span class="keyword">SELECT</span> colA, colB <span class="keyword">from</span> tableABC;  <span class="comment">/*首先这里对游标进行定义*/</span></span><br><span class="line"> <span class="keyword">DECLARE</span>  CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND  <span class="keyword">SET</span>  no_more_record <span class="operator">=</span> <span class="number">1</span>; <span class="comment">/*这个是个条件处理,针对NOT FOUND的条件,当没有记录时赋值为1*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">OPEN</span>  cur_record; <span class="comment">/*接着使用OPEN打开游标*/</span></span><br><span class="line"> <span class="keyword">FETCH</span>  cur_record <span class="keyword">INTO</span> pID, pValue; <span class="comment">/*把第一行数据写入变量中,游标也随之指向了记录的第一行*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> WHILE no_more_record <span class="operator">!=</span> <span class="number">1</span> DO</span><br><span class="line"> <span class="keyword">INSERT</span>  <span class="keyword">INTO</span> testTable(ID, <span class="keyword">Value</span>)</span><br><span class="line"> <span class="keyword">VALUES</span>  (pID, pValue);</span><br><span class="line"> <span class="keyword">FETCH</span>  cur_record <span class="keyword">INTO</span> pID, pValue;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">END</span> WHILE;</span><br><span class="line"> <span class="keyword">CLOSE</span>  cur_record;  <span class="comment">/*用完后记得用CLOSE把资源释放掉*/</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;游标&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#游标&quot;&gt;&lt;/a&gt; 游标&lt;/h2&gt;
&lt;p&gt;游标的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不敏感：数据库可以选择不复制结果集&lt;/li&gt;
&lt;li&gt;只读&lt;/li&gt;
&lt;li&gt;不滚动：游标只能向一方向前进</summary>
      
    
    
    
    <category term="SQL" scheme="http://shizhonggan.github.io/categories/SQL/"/>
    
    
    <category term="游标" scheme="http://shizhonggan.github.io/tags/%E6%B8%B8%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>Keras学习准备</title>
    <link href="http://shizhonggan.github.io/2021/04/17/DeepLeaning/Keras/KerasBase/"/>
    <id>http://shizhonggan.github.io/2021/04/17/DeepLeaning/Keras/KerasBase/</id>
    <published>2021-04-17T07:54:23.000Z</published>
    <updated>2021-04-19T00:45:34.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1. 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow</span><br><span class="line">pip install tensorflow-gpu</span><br><span class="line">pip install keras</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 其他</span></span></span><br><span class="line">pip install pydot pydot_ng  vizgraph python3-tk matplotlib</span><br></pre></td></tr></table></figure><h2 id="2-主要模型"><a class="markdownIt-Anchor" href="#2-主要模型"></a> 2. 主要模型</h2><ol><li>MLP(多层感知机)<ul><li>全连接网络，也成为深度前馈网络或前馈神经网络。常用于简单的逻辑和线性回归问题。处理序列数据和多维数据欠佳。</li></ul></li><li>CNN(卷积神经网络)<ul><li>主要应用与图像或视频的分类、分割和生成等。也可用于时序数据网络</li></ul></li><li>RNN(循环神经网络)<ul><li>主要应用于序列数据的预测</li></ul></li></ol><h2 id="3-代码流程"><a class="markdownIt-Anchor" href="#3-代码流程"></a> 3. 代码流程</h2><h3 id="31-加载数据集"><a class="markdownIt-Anchor" href="#31-加载数据集"></a> 3.1 加载数据集</h3><p>数据集常用MNIST手写体</p><h2 id="3-mlp"><a class="markdownIt-Anchor" href="#3-mlp"></a> 3. MLP</h2><ul><li>数据集 MNIST手写体</li></ul><p>代码：<a href="https://github.com/PacktPublishing/Advanced-Deep-Learning-with-Keras">https://github.com/PacktPublishing/Advanced-Deep-Learning-with-Keras</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-安装&quot;&gt;&lt;/a&gt; 1. 安装&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    <category term="Deep Learning" scheme="http://shizhonggan.github.io/categories/Deep-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>软件定义网络（SDN）学习笔记(1)--iPerf和Netperf性能测试</title>
    <link href="http://shizhonggan.github.io/2021/04/15/SDN/SDN01_iPerf_Netperf/"/>
    <id>http://shizhonggan.github.io/2021/04/15/SDN/SDN01_iPerf_Netperf/</id>
    <published>2021-04-15T08:15:22.000Z</published>
    <updated>2021-04-19T08:47:30.590Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SDN学习目录</p><blockquote><p><a href="/2021/04/09/SDN/SDN00_wireshark/">SDN学习笔记(0)–wireshark抓包分析</a></p><p><a href="/2021/04/14/SDN/SDN01_iPerf_Netperf/">SDN学习笔记(1)–iPerf和Netperf性能测试</a></p><p><a href="/2021/04/08/SDN/SDN02_ovs/">SDN学习笔记(2)–OVS系统架构</a></p></blockquote></blockquote><h2 id="1-iperf-and-netperf"><a class="markdownIt-Anchor" href="#1-iperf-and-netperf"></a> 1. iPerf and Netperf</h2><p>iPerf是网络性能测试工具，可以测试主机之间的吞吐量。iPerf具有多种参数和特性，支持协议、定时、缓冲区等参数的配置调整，能够测试TCP/UDP的最大带宽、延迟抖动、数据包丢失等统计信息。iPerf基于Server/Client的工作模式,客户端向服务端发送一定量的数据，服务端统计并计算带宽、延时和抖动等信息。</p><ul><li>命令格式： iperf [-s|-c host] [options]</li></ul><p>Netperf也是网络性能测试工具，主要用于测试TCP或UDP和Berkeley套接字接口的批量数据传输(Bulk Data Transfer)和请求/应答(Request/Reponse)性能。Netperf工具以Client/Server方式工作，服务端是netServer，用来侦听来自客户端的连接，客户端时NetPerf，用来向服务发起网络测试。在客户端与服务端之间，首先建立一个控制连接，传递有关测试配置的信息，以及测试的结果。在控制连接建立并传递了测试配置信息以后，客户端与服务之间建立一个测试连接，用于来回传递特殊的流量，已测试网络性能。</p><ul><li>命令格式：netperf [global options] --[test-specific options]</li></ul><h2 id="2-性能测试指标"><a class="markdownIt-Anchor" href="#2-性能测试指标"></a> 2. 性能测试指标</h2><ol><li>网络吞吐量：单位时间内通过某个网络(信道或接口)的数据量，吞吐量受网络的带宽或网络的额定速率限制，单位bit/s</li><li>网络延时：一个数据包从用户的计算机发送到网站服务器，然后立即从网站服务器返回用户计算机的来回时间。影响网络演示的主要因素：路由的跳数和网络的流量。交换机延时(Latency)是指从交换机接收到数据包到开始向目的端口复制数据包之间的时间间隔。有许多因素会影响交换机演示大小，如转发技术等。</li><li>抖动：用于描述包在网络中的传输延时变化，抖动越小，说明网络质量越稳定、越好。</li><li>丢包率：理想状态下发送多少数据包就能接收到多少数据包。但由于信号衰减、网络质量等诸多因素的影响并不能达到理想状态。丢包率是指测试中多丢失的数据包数量占所有发送数据包的比率。</li></ol><h2 id="3-iperf和netperf比较"><a class="markdownIt-Anchor" href="#3-iperf和netperf比较"></a> 3. iPerf和Netperf比较</h2><table><thead><tr><th>比较项</th><th>iPerf</th><th>Netperf</th></tr></thead><tbody><tr><td>支持多线程</td><td>是</td><td>是</td></tr><tr><td>可以设置服务器关闭之前保持的连接数</td><td>是</td><td>否</td></tr><tr><td>支持组播</td><td>是</td><td>否</td></tr><tr><td>支持除TCP,UDP之外的协议</td><td>否</td><td>是</td></tr><tr><td>支持IPv6</td><td>一定程度上</td><td>是</td></tr><tr><td>可以输出TCP MSS指</td><td>是</td><td>否</td></tr><tr><td>设置测试分组大小</td><td>否</td><td>是</td></tr><tr><td>支持多种测试范式</td><td>否</td><td>是</td></tr></tbody></table><h2 id="4-测试命令"><a class="markdownIt-Anchor" href="#4-测试命令"></a> 4. 测试命令</h2><h3 id="41-iperf"><a class="markdownIt-Anchor" href="#41-iperf"></a> 4.1 iPerf</h3><h4 id="一-tcp测试"><a class="markdownIt-Anchor" href="#一-tcp测试"></a> 一、TCP测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 主机一 10.0.0.8</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iperf -s <span class="comment"># 作为服务端</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 主机二</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iperf -c 10.0.0.8</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iperf -c 10.0.0.08 -t 32 -i 8 <span class="comment"># 测试时间32s,输出频率8s</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iperf -c 10.0.0.08 -n 2000M -i 5 <span class="comment"># 数据包为2000M,输出频率5s</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 主机三 与主机二 分别执行上述命令，可以观察主机一的测试结果</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;SDN学习目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;/2021/04/09/SDN/SDN00_wireshark/&quot;&gt;SDN学习笔记(0)–wireshark抓包分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2021/04</summary>
      
    
    
    
    <category term="SDN" scheme="http://shizhonggan.github.io/categories/SDN/"/>
    
    
    <category term="性能测试" scheme="http://shizhonggan.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="iPerf" scheme="http://shizhonggan.github.io/tags/iPerf/"/>
    
    <category term="Netperf" scheme="http://shizhonggan.github.io/tags/Netperf/"/>
    
  </entry>
  
  <entry>
    <title>[阅读] Few-Shot Adversarial Domain Adaptation</title>
    <link href="http://shizhonggan.github.io/2021/04/14/Paper/Few-ShotAdversarialDomainAdaptation/"/>
    <id>http://shizhonggan.github.io/2021/04/14/Paper/Few-ShotAdversarialDomainAdaptation/</id>
    <published>2021-04-14T13:54:23.000Z</published>
    <updated>2021-04-16T00:42:51.206Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：</p><p>Github Code: <a href="https://github.com/Coolnesss/fada-pytorch">https://github.com/Coolnesss/fada-pytorch</a>[作者源程序]</p><p>Github Code: <a href="https://github.com/xzsl/FewShotPapers">https://github.com/xzsl/FewShotPapers</a>[源程序，包含数据源，参考文献]</p><p><a href="http://blog.leanote.com/post/wuvin/1f36d3173608">http://blog.leanote.com/post/wuvin/1f36d3173608</a></p><p><a href="https://blog.csdn.net/Adupanfei/article/details/85164925">https://blog.csdn.net/Adupanfei/article/details/85164925</a></p><p><a href="https://github.com/topics/domain-adaptation">https://github.com/topics/domain-adaptation</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;Github Code: &lt;a href=&quot;https://github.com/Coolnesss/fada-pytorch&quot;&gt;https://github.com/Coolnesss/fada-pytorch&lt;/a&gt;[作者源程序]&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Deep Learning" scheme="http://shizhonggan.github.io/categories/Deep-Learning/"/>
    
    
    <category term="Few-shot Learning" scheme="http://shizhonggan.github.io/tags/Few-shot-Learning/"/>
    
    <category term="Semi-Supervised Learning" scheme="http://shizhonggan.github.io/tags/Semi-Supervised-Learning/"/>
    
  </entry>
  
  <entry>
    <title>软件定义网络（SDN）学习笔记(0)--wireshark抓包分析</title>
    <link href="http://shizhonggan.github.io/2021/04/09/SDN/SDN00_wireshark/"/>
    <id>http://shizhonggan.github.io/2021/04/09/SDN/SDN00_wireshark/</id>
    <published>2021-04-09T07:36:22.000Z</published>
    <updated>2021-04-19T02:54:09.283Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SDN学习目录</p><blockquote><p><a href="/2021/04/09/SDN/SDN00_wireshark/">SDN学习笔记(0)–wireshark抓包分析</a></p><p><a href="/2021/04/14/SDN/SDN01_iPerf_Netperf/">SDN学习笔记(1)–iPerf和Netperf性能测试</a></p><p><a href="/2021/04/08/SDN/SDN02_ovs/">SDN学习笔记(2)–OVS系统架构</a></p></blockquote></blockquote><h2 id="简单网络命令"><a class="markdownIt-Anchor" href="#简单网络命令"></a> 简单网络命令</h2><h3 id="1-ifconfig"><a class="markdownIt-Anchor" href="#1-ifconfig"></a> 1. ifconfig</h3><p>ifconfig用于显示、设置、启动和停止网络设备。通过此命令能够显示出正在使用的计算机的IP地址、子网掩码和默认网关等。当网络环境发生改变时可通过此命令对网络进行相应的配置。ifconfig命令的格式和参数解释如下：</p><ul><li>命令格式：ifconfig [网络设备] [参数]</li><li>命令参数如下表所示：</li></ul><p><img src="https://ganshizhong.gitee.io/blogimages/SDN/NetTools/ifconfig.png" alt="" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ifconfig <span class="comment"># 查看网络设备信息</span></span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr fa:16:3e:22:f1:7c  </span><br><span class="line">          inet addr:30.0.0.96  Bcast:30.0.0.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::f816:3eff:fe22:f17c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1</span><br><span class="line">          RX packets:2402 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2390 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:190993 (190.9 KB)  TX bytes:4116702 (4.1 MB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:16 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:880 (880.0 B)  TX bytes:880 (880.0 B)</span><br><span class="line">eth0表示第一块网卡。</span><br><span class="line">HWaddr表示网卡的物理地址即MAC地址。</span><br><span class="line">inet addr表示网卡的IPv4地址。</span><br><span class="line">inet6 addr表示网卡的IPv6地址。</span><br><span class="line">Bcast表示网卡的广播地址。</span><br><span class="line">Mask表示子网掩码地址。</span><br><span class="line">UP表示网卡开启状态。</span><br><span class="line">RUNNING表示网卡的网线被接上。</span><br><span class="line">MULTICAST表示支持组播。</span><br><span class="line">MTU表示最大传输单元。</span><br><span class="line">RX packets、TX packets表示接收、发送数据包情况统计。</span><br><span class="line">RX byte、TX bytes表示接收、发送数据字节数统计信息。</span><br><span class="line">lo表示主机的回环地址。一般是用来测试一个网络程序时又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口，比如把httpd服务器指定到回坏地址后，在浏览器输入127.0.0.1就能看到你所架WEB网站，但只有您能看得到，局域网的其它主机或用户无从知道。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ifconfig eth0 down <span class="comment"># 关闭网卡</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ifconfig eth0 up <span class="comment"># 开启网卡</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255 <span class="comment"># 配置IP地址等信息</span></span></span><br></pre></td></tr></table></figure><blockquote><p>note: 机器重启后，配置的IP地址就失效了，若想将配置信息永久地存的电脑里，需要修改网卡的配置文件。</p></blockquote><h3 id="2-ping"><a class="markdownIt-Anchor" href="#2-ping"></a> 2. ping</h3><p>ping命令用于检查网络是否通畅和网络连接速度。简单地说，网络上的机器都有唯一确定的IP地址，给目标IP地址发送一个数据包，就会返回一个同样大小的数据包，根据返回的数据包可以确定目标主机是否存在，可以初步判断网络是否通畅以及连接速度等信息。根据数据包返回时间和丢包率，可以大致判断出网络是否稳定。Ping的返回异常信息有“Request Timed Out”、“Destination Net Unreachable”、“Bad IP address”和“Source quench received”：<br />（1） Request Timed Out表示对方主机可以到达但是连接超时，这种情况通常是对方拒绝接收你发给它的数据包而造成的数据包丢失。原因可能是对方装有防火墙。<br />（2） Destination Net Unreachable表示对方主机不存在或者没有跟对方建立连接。<br />（3） Bad IP address表示可能没有连接到DNS服务器所以无法解析这个IP地址，也可能是IP地址不存在。<br />（4） Source quench received表示对方或中途的服务器繁忙无法回应。<br />说明：“destination host unreachable”和“time out”的区别：如果所经过的路由器的路由表中具有到达目标的路由，而目标因为其它原因不可到达，这时候会出现“time out”，如果路由表中连到达目标的路由都没有，那就会出现“destination host unreachable”。<br />ping命令的格式和参数解释如下：</p><ul><li>命令格式：<br />ping [参数] [主机名或IP地址]</li><li>命令参数如下表所示：</li></ul><p><img src="https://ganshizhong.gitee.io/blogimages/SDN/NetTools/ping.png" alt="" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ping 127.0.0.1 <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ping -c 5 www.xxx.com <span class="comment"># -c 5表示在发送5个数据包后停止。</span></span></span><br></pre></td></tr></table></figure><blockquote><p>note1: ping本网网关或本网IP地址，可以检查硬件设备是否有问题，也可以检查本机与本地网络连接是否正常（在非局域网中这一步骤可以忽略）。</p></blockquote><h3 id="3-traceroute命令"><a class="markdownIt-Anchor" href="#3-traceroute命令"></a> 3. traceroute命令</h3><p>traceroute是用来显示源主机到目标主机之间所经过的网关的命令。traceroute命令用IP生存时间（TTL）字段和ICMP错误消息来确定从一个主机到网络上其他主机的路由。首先，traceroute发送一个TTL是1的IP数据包到目的地，当路径上的第一个路由器收到这个数据包时，TTL将会减1。此时，TTL变为0，所以该路由器会将此数据包丢掉，并返回一个ICMP time exceeded消息（包括发IP包的源地址，IP包的所有内容及路由器的IP地址）。traceroute收到这个消息后，便知道这个路由器存在于路径上，接着traceroute再发送一个TTL是2的数据包，继而发现第2个路由器。依此规律，traceroute每次将发送的数据包的TTL加1来发现下一个路由器，一直持续到某个数据包抵达目的地。当数据包到达目的地后，该主机则不会返回ICMP time exceeded消息，此时traceroute通过UDP数据包向不常见端口（30000以上）发送数据包，因此会收到ICMP port unreachable消息，故可判断到达目的地。<br />traceroute命令的格式和参数解释如下：</p><ul><li>命令格式：<br />traceroute [参数] [主机]</li><li>命令参数如下表所示：</li></ul><p><img src="https://ganshizhong.gitee.io/blogimages/SDN/NetTools/traceroute.png" alt="" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sudo su</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> apt-get install traceroute <span class="comment"># 安装</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> traceroute www.baidu.com <span class="comment"># 追踪网络数据包的路由途径，执行结果如下图所示</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> traceroute -m 10 www.baidu.com <span class="comment"># 设置路由追踪10条，即只发回通过10个网关的信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> traceroute -w 3 www.baidu.com <span class="comment"># 把对外发探测包的等待响应时间设置为3秒</span></span></span><br></pre></td></tr></table></figure><h3 id="4-route命令"><a class="markdownIt-Anchor" href="#4-route命令"></a> 4. route命令</h3><p>route用于显示和操作IP路由表，它的主要作用是创建静态路由。在Linux系统中，设置路由通常是为了解决以下问题：Linux系统在一个局域网中，局域网中有一个网关，若要让机器访问Internet，那么就需要将网关的IP地址设置为Linux机器的默认路由。route命令的格式和参数解释如下：</p><ul><li>命令格式：<br />route [-f] [-p] [command] [destination] [mask netmask] [gateway] [metric] [if interface]</li><li>命令参数如下表所示:</li></ul><p><img src="https://ganshizhong.gitee.io/blogimages/SDN/NetTools/traceroute.png" alt="" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> route</span></span><br><span class="line">openlab@openlab:~/Desktop$ route</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">default         30.0.0.1        0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">default         30.0.0.1        0.0.0.0         UG    100    0        0 eth0</span><br><span class="line">30.0.0.0        *               255.255.255.0   U     0      0        0 eth0</span><br><span class="line">169.254.169.254 30.0.0.1        255.255.255.255 UGH   0      0        0 eth0</span><br></pre></td></tr></table></figure><ul><li>Destination：表示目标网段或主机。</li><li>Gateway：表示网关地址，“*”表示目标是本主机所属的网络，不需要路由。</li><li>Genmask：表示网络掩码。</li><li>Flags：表示标记。常用标记如下：<ul><li>U表示路由是活动的</li><li>H表示目标是一个主机</li><li>G表示路由指向网关</li><li>R表示恢复动态路由产生的表项</li><li>D表示由路由的后台程序动态地安装</li><li>M表示由路由的后台程序修改</li><li>！表示拒绝路由。</li></ul></li><li>Metric：表示路由距离，到达指定网络所需的中转数（Linux内核中没有使用）。</li><li>Ref：表示路由项引用次数（Linux内核中没有使用）。</li><li>Use：表示此路由项被路由软件查找的次数。</li><li>Iface：表示该路由表项对应的输出接口。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0 <span class="comment"># 添加网关</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> route del -net 224.0.0.0 netmask 240.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> route add -net 192.168.62.0 netmask 255.255.255.0 gw 192.168.1.1 <span class="comment"># 添加一条路由(发往192.168.62这个网段的全部要经过网关192.168.1.1)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> route del -net 192.168.122.0 netmask 255.255.255.0 <span class="comment"># 删除一条路由　删除的时候不用写网关</span></span></span><br></pre></td></tr></table></figure><h3 id="5-ip"><a class="markdownIt-Anchor" href="#5-ip"></a> 5. IP</h3><p>ip命令用来显示或操纵Linux主机的路由、网络设备、策略路由和隧道，是Linux下较新的功能强大的网络配置工具。它能够替代一些传统的网络管理工具，例如ifconfig、route等，使用权限为超级用户，ip命令的格式和参数解释如下：</p><ul><li>命令格式：<br />ip [OPTIONS] OBJECT [COMMAND [ARGUMENTS]]</li><li>命令参数：<br />OPTIONS是一些修改ip行为或者改变其输出的选项。所有的选项都是以-字符开头，分为长、短两种形式。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ip link list <span class="comment"># 查看网络设备的运行状态</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default </span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether fa:16:3e:50:89:7f brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><ul><li>lo表示主机的回环地址。</li><li>eth0表示第一块网卡。</li><li>UP表示网卡开启状态。</li><li>MULTICAST表示支持组播。</li><li>mtu表示最大传输单元。</li><li>link/ether表示MAC地址。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ip -s link list <span class="comment"># 查看更加详细的网络设备信息</span></span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default </span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    RX: bytes  packets  errors  dropped overrun mcast   </span><br><span class="line">    880        16       0       0       0       0      </span><br><span class="line">    TX: bytes  packets  errors  dropped carrier collsns </span><br><span class="line">    880        16       0       0       0       0      </span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether fa:16:3e:50:89:7f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    RX: bytes  packets  errors  dropped overrun mcast   </span><br><span class="line">    378682     3605     0       0       0       0      </span><br><span class="line">    TX: bytes  packets  errors  dropped carrier collsns </span><br><span class="line">    2422264    2317     0       0       0       0 </span><br></pre></td></tr></table></figure><ul><li>RX packets、TX packets表示接收、发送数据包情况统计。</li><li>RX bytes、TX bytes表示接收、发送数据字节数统计信息。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ip addr list <span class="comment"># 查看ip信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ip link <span class="built_in">set</span> eth0 down <span class="comment"># ip link list命令</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ip link <span class="built_in">set</span> eth0 up <span class="comment"># 开启eth0网卡</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> route add default gw 30.0.1.1 <span class="comment"># 设置网关</span></span></span><br></pre></td></tr></table></figure><ul><li>inet表示网卡的IPv4地址。</li><li>inet6表示网卡的IPv6地址。</li></ul><blockquote><p>note: 使用ip命令关闭网卡后，默认路由也被删除了，而使用ip命令启用网卡时，并不会配置路由，所以将无法ping通公网地址，故需要配置路由。</p></blockquote><h3 id="6-netstat命令"><a class="markdownIt-Anchor" href="#6-netstat命令"></a> 6. netstat命令</h3><p>netstat是一个监控TCP/IP网络的非常有用的命令，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。它用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。另外它还能列出处于监听状态（即等待接入请求）的套接字。如果你想确认系统上的Web服务有没有起来，你可以查看80端口有没有打开。netstat命令的格式和参数解释如下：</p><ul><li>命令格式：<br />netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][—ip]</li><li>命令参数如下表所示：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> netstat -a <span class="comment"># 查看所有端口信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> netstat -at <span class="comment"># 查看TCP连接</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> netstat -l <span class="comment"># 查看所有处于监听状态的Sockets</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> netstat -ap | grep ssh <span class="comment"># 查看程序运行的端口</span></span></span><br></pre></td></tr></table></figure><h3 id="7-tcpdump命令"><a class="markdownIt-Anchor" href="#7-tcpdump命令"></a> 7. tcpdump命令</h3><p>tcpdump是根据使用者的定义对网络上的数据包进行截获的包分析工具。tcpdump凭借强大的功能和灵活的截取策略，成为类UNIX系统下用于网络分析和问题排查的首选工具。tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤。</p><ul><li>命令格式：<br />tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]<br />[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]<br />[ -T 类型 ] [ -w 文件名 ] [表达式 ]</li><li>命令参数：</li></ul><p>tcpdump命令常用参数如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tcpdump -i eth0 <span class="comment"># 进行抓包</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ping www.xxxx.com <span class="comment"># 在打开一个窗口进行网络请求,可看到抓包信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tcpdump -i eth0 tcp port 80 <span class="comment"># 抓取端口为80的TCP协议的数据信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tcpdump-i eth0 tcp <span class="comment"># 抓取TCP协议的数据信息，并访问网址：www.xxx.com</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tcpdump -i eth0 -w tcpdump_package.pcap <span class="comment"># 该命令作用是将tcupdump抓到的网络包保存到tcpdump_package.pcap文件中，命名规则为：文件名.pcap。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tcpdump -r tcpdump_package.pcap <span class="comment"># 该命令作用是将保存在tcpdump_package.pacp中的抓包信息读取出来。</span></span></span><br></pre></td></tr></table></figure><h3 id="练习题"><a class="markdownIt-Anchor" href="#练习题"></a> 练习题</h3><p>下面（B）命令用于测试网络是否连通。</p><ul><li>A. ifconfig</li><li>B. ping</li><li>C. ftp</li><li>D. route</li></ul><p>下列相关route命令的使用错误的是（B）</p><ul><li>A. 添加路由：route add-net 192.168.1.0 netmask - 255.255.255.0 gw 192.168.1.1</li><li>B. 删除路由：route del-net 192.168.1.0</li><li>C. 添加默认网关：route add default gw 192.168.120.240</li><li>D. 添加路由：route add-net 192.168.1.0/24 dev eth0</li></ul><p>下面输出信息解释错误的是（D）</p><ul><li>A. HWaddr表示网卡的物理地址即MAC地址。</li><li>B. inet addr表示网卡的IP地址。</li><li>C. MTU表示最大传输单元。</li><li>D. RX packets、TX packets表示接收、发送数据字节数统计信息。</li></ul><p>判断： 使用ifconfig命令配置主机信息后，信息将永久保存在电脑里。×</p><p>判断： traceroute -m 4 www.xxx.com表示只发回通过4个网关的信息。√</p><p>下列关于ip命令理解错误的是（B）</p><ul><li>A. ip命令用来显示或操纵Linux主机的路由、网络设备、策略路由和隧道，它能够替代一些传统的网络管理工具，例如ifconfig、route等。</li><li>B. ip命令支持的操作有add、delete、show和link。</li><li>C. 可以使用ip addr add 192.168.17.30/24 dev eth0命令给主机配置IP地址。</li><li>D. 使用ip命令的neighbour选项，可以查看接入你所在的局域网的设备的MAC地址。</li></ul><p>关于tcpdump命令理解错误的是（B）</p><ul><li>A. tcpdump支持对网络层、协议、主机、网络或端口的过滤。</li><li>B. tcpdump -i eth1 ‘((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host 192.168.1.200)))’，表示抓取所有经过eth1，目的地址是192.168.1.254和192.168.1.200，端口是80的TCP数据。</li><li>C. 不带任何选项的tcpdump，默认会抓取第一个网络接口，且只有将tcpdump进程终止才会停止抓包。</li><li>D. 表达式单元之间可以使用操作符&quot; and / &amp;&amp; / or / || / not / ! &quot;进行连接，从而组成复杂的条件表达式。</li></ul><p>下面对netstat的输出结果理解正确的是（D）</p><ul><li>A. Active Internet connections表示TCP连接；Active UNIX domain sockets表示Unix域套接口。</li><li>B. State：表示连接状态，LISTENING表示正在侦听端口，等待建立连接。</li><li>C. Proto：表示使用的通信协议。</li><li>D. 以上均正确</li></ul><p>判断： netstat是一个网络连接端扫描软件，用来扫描电脑上开放的端口，确定哪些服务运行在哪些端口，并且推断出计算机运行的操作系统。×</p><p>判断： 使用括号&quot;()&quot;可以改变tcpdump的表达式的优先级 √</p><h2 id="wireshark抓包分析工具"><a class="markdownIt-Anchor" href="#wireshark抓包分析工具"></a> Wireshark抓包分析工具</h2><p>Wireshark是一个免费开源的网络数据包分析软件。用于截取网络数据包并尽可能显示出最为详细的网络数据包数据。为了安全考虑，Wireshark只能查看封包，而不能修改封包的内容，或者发送封包。Wireshark能够对大部分局域网协议进行解析，具有界面简单、操作方便、实时显示捕获数据的优点。Wireshark不是入侵侦测系统，对于网络上的异常流量行为，Wireshark不会产生警示或是任何提示。然而，仔细分析Wireshark撷取的封包能够帮助使用者对于网络行为有更清楚的了解。Wireshark的用途很广，网络管理员可以使用Wireshark来检测网络问题，网络安全工程师可以使用Wireshark来检查资讯安全相关问题，开发者可以使用Wireshark来为新的通讯协议除错，普通使用者可以使用Wireshark来学习网络协议的相关知识。<br />在使用Wireshark工具时，可以按如下流程进行：</p><ol><li>确定Wireshark的位置。即在哪执行wireshark命令，如果没有一个正确的位置，启动Wireshark后会花费很长的时间捕获一些与自己无关的数据。</li><li>选择捕获接口。一般都是选择连接到Internet网络的接口，这样才可以捕获到与网络相关的数据。否则，捕获到的其它数据对自己也没有任何帮助。</li><li>使用捕获过滤器。通过设置捕获过滤器，可以避免产生过大的捕获文件。这样用户在分析数据时，也不会受其它数据干扰。而且，还可以为用户节约大量的时间。</li><li>使用显示过滤器。通常使用捕获过滤器过滤后的数据，往往还是很复杂。为了使过滤的数据包再更细致，此时使用显示过滤器进行过滤。</li><li>使用着色规则。通常使用显示过滤器过滤后的数据，都是有用的数据包。如果想更加突出的显示某个会话，可以使用着色规则高亮显示。</li><li>构建图表。如果用户想要更明显的看出一个网络中数据的变化情况，使用图表的形式可以很方便的展现数据分布情况。</li><li>重组数据。Wireshark的重组功能，可以重组一个会话中不同数据包的信息，或者是一个重组一个完整的图片或文件。由于传输的文件往往较大，所以信息分布在多个数据包中。为了能够查看到整个图片或文件，这时候就需要使用重组数据的方法来实现。</li></ol><h3 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境</h3><p>控制器：Ubuntu14.03桌面版,Floodlight1.0;CPU:1,内存:2GB,磁盘:20GB</p><p>交换机：Ubuntu14.03桌面版,OVS2.3.1;CPU:1,内存:2GB,磁盘:20GB</p><h3 id="基本使用步骤"><a class="markdownIt-Anchor" href="#基本使用步骤"></a> 基本使用步骤</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> apt-get install wireshark <span class="comment"># root用户下安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo wireshark <span class="comment"># 普通用户下打开wireshark主界面，这里权限的问题，root打不开，普通用户无法获得网卡</span></span></span><br></pre></td></tr></table></figure><h4 id="步骤-1-选择需要抓包的网卡"><a class="markdownIt-Anchor" href="#步骤-1-选择需要抓包的网卡"></a> 步骤 1 选择需要抓包的网卡</h4><p>Wireshark是捕获机器上的某一块网卡的网络包，当你的机器上有多块网卡的时候，你需要选择一个网卡，请按下面的方式选择网卡：</p><ul><li>方式一：选择网卡“eth0”，单击开始按钮</li><li>方式二：1)在菜单栏选择&quot;Capture -&gt; Interfaces&quot;，进入选择网卡的页面;2)选择网卡“eth0”，单击“Start”，进入抓包页面</li></ul><p><img src="https://ganshizhong.gitee.io/blogimages/SDN/Wireshark/wiresharkui.png" alt="" /></p><h4 id="步骤-2-单击浏览器图标打开浏览器在浏览器上访问wwwsinacomcn进行抓包"><a class="markdownIt-Anchor" href="#步骤-2-单击浏览器图标打开浏览器在浏览器上访问wwwsinacomcn进行抓包"></a> 步骤 2 单击浏览器图标，打开浏览器，<a href="http://xn--www-u28dn69a56ah46gcvzcoyd455a.sina.com.cn">在浏览器上访问www.sina.com.cn</a>，进行抓包</h4><h4 id="步骤-3-单击红色停止按钮停止抓包抓包结果如下图所示"><a class="markdownIt-Anchor" href="#步骤-3-单击红色停止按钮停止抓包抓包结果如下图所示"></a> 步骤 3 单击红色停止按钮停止抓包，抓包结果如下图所示</h4><p><img src="https://ganshizhong.gitee.io/blogimages/SDN/Wireshark/wiresharkcapturing.png" alt="" /></p><p>图中四个区域分别为：</p><ol><li>为DISPLAY FILTER（显示过滤器），显示过滤器用于查找捕捉记录中的内容。</li><li>为PACKET LIST PANE（封包列表），封包列表中显示所有已经捕获的封包。可以看到发送或接收方的MAC/IP地址、TCP/UDP端口号、协议或封包的内容。</li><li>为PACKET DETAILS PANE（封包详细信息）：这里显示的是在封包列表中被选中项目的详细信息。</li><li>为DISSECTOR PANE（16进制数据）：“解析器”在Wireshark中也被叫做“16进制数据查看面板”。这里显示的内容与“封包详细信息”中相同，只是改为以16进制的格式表述。</li></ol><h4 id="步骤-4-根据抓包结果分析抓包数据"><a class="markdownIt-Anchor" href="#步骤-4-根据抓包结果分析抓包数据"></a> 步骤 4 根据抓包结果，分析抓包数据</h4><ul><li>在封包列表部分选择一条TCP协议数据，如下图所示。</li><li>在封包列表部分选择一条TCP协议数据，如下图所示。</li></ul><p><img src="https://ganshizhong.gitee.io/blogimages/SDN/Wireshark/captureanalysis.png" alt="" /></p><p>图中：</p><ul><li>Frame：表示物理层数据帧概况。</li><li>Ethernet II：表示数据链路层以太网帧头部信息。</li><li>Internet Protocol Version 4：表示互联网IP包头信息。</li><li>Transmission Control Protocol：表示传输层数据段头部信息，此处为TCP。</li></ul><p><img src="https://ganshizhong.gitee.io/blogimages/SDN/Wireshark/capturemessage.png" alt="" /></p><p>图中：</p><ul><li>数据链路层显示有源MAC地址，目的MAC地址。</li><li>网络层IP的版本信息显示为IPv4。协议为TCP。源IP地址30.0.0.93即本机IP地址，目的IP地址10.168.16.15即远端服务器地址。</li><li>源端口为5901，目的端口为52356。</li></ul><h4 id="步骤-5-过滤报文信息"><a class="markdownIt-Anchor" href="#步骤-5-过滤报文信息"></a> 步骤 5 过滤报文信息</h4><ul><li>过滤源IP地址<ul><li>如查找源地址为30.0.0.93的报文，则在过滤框中输入ip.src==30.0.0.93进行过滤</li></ul></li><li>过滤目的IP地址<ul><li>如查找目的地址为10.168.16.15的报文，则在过滤框中输入ip.dst==10.168.16.15进行过滤</li></ul></li><li>过滤端口<ul><li>如过滤52356端口，则在过滤框中输入tcp.port<mark>52356||udp.port</mark>52356</li></ul></li><li>过滤协议<ul><li>如过滤TCP的协议，则在过滤框中输入协议名tcp进行过滤</li></ul></li><li>使用连接符and过滤。<ul><li>过滤两种条件时，使用and连接，如过滤ip为30.0.0.93并且为TCP协议的报文，则在过滤框中输入ip.src==30.0.0.93 and tcp进行过滤，如下图所示。步骤 6 保存Wireshark抓包数据。</li></ul></li></ul><p>捕获的数据信息可以保存在文件中，这样就可以随时在Wireshark中打开此文件进行分析，而无需再次捕获同样的数据。关闭数据捕获屏幕或退出Wireshark时，系统会提示你保存信息</p><h3 id="练习题-2"><a class="markdownIt-Anchor" href="#练习题-2"></a> 练习题</h3><p>下面关于Wireshark说法错误的是（D）</p><ul><li>A. 捕获过滤器用来过滤捕获的封包，以免捕获太多的记录。</li><li>B. 封包列表中显示所有已经捕获的封包。可以看到发送或接收方的MAC/IP地址、TCP/UDP端口号、协议或封包的内容。</li><li>C. 显示过滤器用来告诉Wireshark只显示那些符合过滤条件的数据包。</li><li>D. Wireshark能够对大部分局域网协议进行解析，能够查看、修改封包的内容，具有界面简单、操作方便、实时显示捕获数据的优点。</li></ul><p>下面关于Wireshark的过滤表达式描述错误的是（B）</p><ul><li>A. 过滤ip为10.0.1.1并且为http协议的报文，表达式为：ip.src==10.0.1.1 and http。</li><li>B. 如果没有特别指明来源或目的地，则默认使用源地址进行过滤。</li><li>C. 否(“not”)具有最高的优先级，或(“or”)和与(“and”)具有相同的优先级，运算时从左至右进行。</li><li>D. 对目的地址为192.168.0.1的包的过滤，表达式为：ip.dst eq 192.168.0.1。</li></ul><p>判断：封包列表的面板中显示：编号、时间戳、源地址、目标地址、协议、长度以及封包信息，不同的协议用了不同的颜色显示，也可以自己修改这些显示的颜色规则。 √</p><p>判断：Wireshark的捕捉过滤器支持协议过滤和内容过滤。×</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;SDN学习目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;/2021/04/09/SDN/SDN00_wireshark/&quot;&gt;SDN学习笔记(0)–wireshark抓包分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2021/04</summary>
      
    
    
    
    <category term="SDN" scheme="http://shizhonggan.github.io/categories/SDN/"/>
    
    
    <category term="性能测试" scheme="http://shizhonggan.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="网络" scheme="http://shizhonggan.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>软件定义网络（SDN）学习笔记(2)--OVS系统架构</title>
    <link href="http://shizhonggan.github.io/2021/04/08/SDN/SDN02_ovs/"/>
    <id>http://shizhonggan.github.io/2021/04/08/SDN/SDN02_ovs/</id>
    <published>2021-04-08T13:31:04.000Z</published>
    <updated>2021-04-15T01:02:25.031Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SDN学习目录</p><blockquote><p><a href="/2021/04/09/SDN/SDN00_wireshark/">SDN学习笔记(0)–wireshark抓包分析</a></p><p><a href="/2021/04/14/SDN/SDN01_iPerf_Netperf/">SDN学习笔记(1)–iPerf和Netperf性能测试</a></p><p><a href="/2021/04/08/SDN/SDN02_ovs/">SDN学习笔记(2)–OVS系统架构</a></p></blockquote></blockquote><h2 id="open-vswitch-ovs"><a class="markdownIt-Anchor" href="#open-vswitch-ovs"></a> Open vSwitch (OVS)</h2><p>OVS 架构分为三个部分:</p><ul><li>内核空间：包含了流表（Flow Table）和Datapath模块（类似于网桥，主要负责对数据分组进行操作）。</li><li>用户空间：运行着OVS的守护进程(Open vSwitch Daemon, vswitchd)和数据库(Open vSwitch Database, ovsdb)，他们是ovs的核心功能模块。<ul><li>vswitchd类似于OVS的心脏，维持OVS的声明周期。可以配置一系列特性：<ul><li>基于MAC地址学习的二层交换</li><li>支持IEEE802.1Q VLAN</li><li>sFlow监测</li><li>连接OpenFlow控制器</li><li>通过Netlink协议与内核模块Datapath直接通信</li></ul></li><li>ovsdb相当于OVS的大脑，存储OVS的配置信息和数据流信息。</li></ul></li><li>配置管理层：包括ovs-dpctl, ovs-ofctl, ovs-appctl, ovs-vsctl和ovsdb-tool等，主要用于和vswitchd,ovsdb之间进行交互操作以及ovs的安装配置和部署</li></ul><p><img src="https://ganshizhong.gitee.io/blogimages/SDN/ovs%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.png" alt="ovs 系统架构" /></p><h2 id="ovs安装使用"><a class="markdownIt-Anchor" href="#ovs安装使用"></a> OVS安装使用</h2><p>OVS可以运行在任何基于Linux的虚拟化平台，包括KVM, VirtualBox, Xen等，其代码都是基于C编写，所以易于移植到其他环境。安装有两种方法：一种通过二进制文件安装apt-get；另外一种是源码安装。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;SDN学习目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;/2021/04/09/SDN/SDN00_wireshark/&quot;&gt;SDN学习笔记(0)–wireshark抓包分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2021/04</summary>
      
    
    
    
    <category term="SDN" scheme="http://shizhonggan.github.io/categories/SDN/"/>
    
    
    <category term="网络架构" scheme="http://shizhonggan.github.io/tags/%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/"/>
    
    <category term="SDN" scheme="http://shizhonggan.github.io/tags/SDN/"/>
    
    <category term="OVS" scheme="http://shizhonggan.github.io/tags/OVS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo markdown 插入图片解决方法</title>
    <link href="http://shizhonggan.github.io/2021/04/07/HexoStudy/HexoImageFile/"/>
    <id>http://shizhonggan.github.io/2021/04/07/HexoStudy/HexoImageFile/</id>
    <published>2021-04-07T12:41:21.000Z</published>
    <updated>2021-04-09T00:58:36.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>官方解决办法： <a href="https://hexo.io/zh-cn/docs/asset-folders.html">https://hexo.io/zh-cn/docs/asset-folders.html</a></p><p>我尝试了一下这个官方办法，并未成功。于是，不得不尝试大家推荐的“图床”办法。</p><p>“图床”即第三方存储图片的地方，并能支持http/https协议以提供图片访问链接。减轻本地服务器空间，加快图片打开速度。</p><p>提供图床的第三方网站众多。出于对安全、网站服务能力的考量，建议采用gitee 作为图片托管仓库。</p><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><ol><li>新建仓库</li><li>仓库下新建index.html，此时service 里便出现gitee pages功能</li><li>点击gitee pages进入设置，直接默认确定即可，然后出现该网页链接地址 url</li><li>克隆到本地,然后将你需要的图片放到该目录下</li><li>push到仓库</li><li>于是，可以通过url+path的方式访问图片</li><li>markdown可以直接使用</li></ol><blockquote><p>温馨提示1：图要加水印</p><p>温馨提示2：gitee每次更新都要进入service-&gt;gitee page-&gt;update</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;官方解决办法： &lt;a href=&quot;https://hexo.io/zh-cn/docs/asset-folders.html&quot;&gt;https:</summary>
      
    
    
    
    <category term="Hexo" scheme="http://shizhonggan.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://shizhonggan.github.io/tags/Hexo/"/>
    
    <category term="前端" scheme="http://shizhonggan.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Gitalk 评论登录出现403 解决方法</title>
    <link href="http://shizhonggan.github.io/2021/04/07/HexoStudy/Gitalk403Solution/"/>
    <id>http://shizhonggan.github.io/2021/04/07/HexoStudy/Gitalk403Solution/</id>
    <published>2021-04-07T11:22:12.000Z</published>
    <updated>2021-04-09T01:07:43.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p><strong>网络受限</strong></p><p>本篇文章参考：<a href="https://cuiqingcai.com/30010.html">https://cuiqingcai.com/30010.html</a></p><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><p>Related <a href="https://github.com/ShizhongGan/gitalkcomments/issues">Issues</a> not found</p><p>Please contact @ShizhongGan to initialize the comment</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>用代理啊</li><li>换其他的</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;网络受限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本篇文章参考：&lt;a href=&quot;https://cuiqingcai.com/30</summary>
      
    
    
    
    <category term="Hexo" scheme="http://shizhonggan.github.io/categories/Hexo/"/>
    
    
    <category term="hexo" scheme="http://shizhonggan.github.io/tags/hexo/"/>
    
    <category term="gitalk" scheme="http://shizhonggan.github.io/tags/gitalk/"/>
    
  </entry>
  
  <entry>
    <title>vs code 实用扩展插件</title>
    <link href="http://shizhonggan.github.io/2021/04/07/Tips/vscode_tips/"/>
    <id>http://shizhonggan.github.io/2021/04/07/Tips/vscode_tips/</id>
    <published>2021-04-07T06:32:06.000Z</published>
    <updated>2021-04-09T01:06:41.360Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Angular 8 and TypeScript/HTML VS Code Snippets</li><li>Awesome Flutter Snippets</li><li>Chinese (Simplified) Language Pack for Visual Studio Code</li><li>Code Runner</li><li>Code Spell Checker</li><li>Dart</li><li>Docker</li><li>Draw.io Integration</li><li>Flutter</li><li>Graphviz Interactive Preview</li><li>HTML Boilerplate</li><li>Jupyter</li><li>LaTeX Workshop</li><li>Live Server</li><li>Markdown All in One</li><li>Markdown Mind Map Preview</li><li>Markdown PDF</li><li>Markdown+Math</li><li>Office Viewer</li><li>open in browser</li><li>PlantUML</li><li>python</li><li>reStructuredText</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;Angular 8 and TypeScript/HTML VS Code Snippets&lt;/li&gt;
&lt;li&gt;Awesome Flutter Snippets&lt;/li&gt;
&lt;li&gt;Chinese (Simplified) Language Pack for Vi</summary>
      
    
    
    
    <category term="Tips" scheme="http://shizhonggan.github.io/categories/Tips/"/>
    
    
    <category term="vs code插件" scheme="http://shizhonggan.github.io/tags/vs-code%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Gitee部署Hexo 博客</title>
    <link href="http://shizhonggan.github.io/2021/04/07/HexoStudy/HexoGiteeDeploy/"/>
    <id>http://shizhonggan.github.io/2021/04/07/HexoStudy/HexoGiteeDeploy/</id>
    <published>2021-04-07T01:21:46.000Z</published>
    <updated>2021-04-09T00:58:39.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于网络限制，Github部署Hexo博客加载速度慢，因此建议采用gitee进行部署。</p><h2 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h2><ol><li>注册gitee账号</li><li>新建公开仓库<ul><li>访问地址不带二级目录设置：如果你想你的 pages 首页访问地址不带二级目录，<a href="https://link.juejin.im/?target=http://xn--ipvb-f96g.gitee.io">如ipvb.gitee.io</a>，你需要建立一个与自己个性地址同名的项目，如 <a href="https://link.juejin.im/?target=https://gitee.com/ipvb">gitee.com/ipvb</a> 这个用户，想要创建一个自己的站点，但不想以子目录的方式访问，想以ipvb.oschina.io直接访问，那么他就可以创建一个名字为ipvb的项目 <a href="https://link.juejin.im/?target=https://gitee.com/ipvb/ipvb">gitee.com/ipvb/ipvb</a> 部署完成后，就可以以 <a href="https://link.juejin.im/?target=https://ipvb.gitee.io">ipvb.gitee.io</a> 进行访问了。</li></ul></li><li>设置hexo _config.yml文件，绑定该新建的仓库</li><li>hexo d部署</li><li>该仓库的service出现gitee page功能，点击进去默认确定即可</li><li>然后通过ipvb.gitee.io即可访问</li></ol><blockquote><p>温馨提示：每次hexo d部署完，都要进入gitee page功能中update，否则无法看到网页变化。github不需要。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于网络限制，Github部署Hexo博客加载速度慢，因此建议采用gitee进行部署。&lt;/p&gt;
&lt;h2 id=&quot;部署方法&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="Hexo" scheme="http://shizhonggan.github.io/categories/Hexo/"/>
    
    
    <category term="Gitee" scheme="http://shizhonggan.github.io/tags/Gitee/"/>
    
    <category term="Hexo" scheme="http://shizhonggan.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 快速搭建静态博客</title>
    <link href="http://shizhonggan.github.io/2021/04/06/HexoStudy/HexoStudy/"/>
    <id>http://shizhonggan.github.io/2021/04/06/HexoStudy/HexoStudy/</id>
    <published>2021-04-06T02:26:34.000Z</published>
    <updated>2021-04-09T00:59:12.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置npm环境</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;gan_shizhong@163.com&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> install plugin</span></span><br><span class="line">npm install hexo-wordcount --save</span><br><span class="line">npm install hexo-generator-json-content --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line"></span><br><span class="line">npm install hexo-neat --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm install hexo-translate-title --save</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装Hexo</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;文件名&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="Hexo" scheme="http://shizhonggan.github.io/categories/Hexo/"/>
    
    
    <category term="hexo" scheme="http://shizhonggan.github.io/tags/hexo/"/>
    
    <category term="gitalk" scheme="http://shizhonggan.github.io/tags/gitalk/"/>
    
    <category term="前端" scheme="http://shizhonggan.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
