{"meta":{"title":"钟声","subtitle":"甘士忠个人博客","description":"Sharing is meaningful","author":"甘士忠","url":"http://shizhonggan.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-04-02T00:44:50.671Z","updated":"2021-04-02T00:44:50.671Z","comments":false,"path":"/404.html","permalink":"http://shizhonggan.github.io/404.html","excerpt":"","text":""},{"title":"About","date":"2021-05-21T04:29:42.366Z","updated":"2021-05-21T04:29:42.366Z","comments":false,"path":"about/index.html","permalink":"http://shizhonggan.github.io/about/index.html","excerpt":"","text":""},{"title":"书单","date":"2021-04-02T00:44:50.672Z","updated":"2021-04-02T00:44:50.672Z","comments":false,"path":"books/index.html","permalink":"http://shizhonggan.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-04-02T00:44:50.672Z","updated":"2021-04-02T00:44:50.672Z","comments":false,"path":"categories/index.html","permalink":"http://shizhonggan.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-04-02T00:44:50.673Z","updated":"2021-04-02T00:44:50.673Z","comments":true,"path":"links/index.html","permalink":"http://shizhonggan.github.io/links/index.html","excerpt":"","text":""},{"title":"阅读","date":"2021-04-14T00:44:54.257Z","updated":"2021-04-14T00:44:54.257Z","comments":false,"path":"reading/index.html","permalink":"http://shizhonggan.github.io/reading/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-04-02T00:44:50.673Z","updated":"2021-04-02T00:44:50.673Z","comments":false,"path":"repository/index.html","permalink":"http://shizhonggan.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-04-02T00:44:50.694Z","updated":"2021-04-02T00:44:50.694Z","comments":false,"path":"tags/index.html","permalink":"http://shizhonggan.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-05-21T06:09:01.230Z","updated":"2021-05-21T06:09:01.230Z","comments":false,"path":"about/20210521_update/index.html","permalink":"http://shizhonggan.github.io/about/20210521_update/index.html","excerpt":"","text":"Paxton GAN shizhongan.github.io 15822523657 gan_shizhong@163.com EducationCarnegie Mellon University 2018.9 - Ph.D. in Software Engineering Co-advised by Ken Koedinger and Josh Sunshine Columbia University 2016.9 - 2018.5 B.S. in Computer Science, Magna Cum Laude Vision, Graphics track Dickinson College 2013.9 - 2016.5 B.S. in Computer Science, Summa Cum Laude Computer Science Departmental Honors PublicationsPenrose: From Mathematical Notation to Beautiful DiagramsKatherine Ye, Wode Ni, Max Krieger, Dor Ma’ayan, Joshua Sunshine, Jonathan Aldrich, and Keenan Crane.ACM Transactions on Graphics (SIGGRAPH’20).[PDF][BibTeX][www][repo] How Domain Experts Create Conceptual Diagrams and Implications for Tool DesignDor Ma’ayan*, Wode Ni*, Katherine Ye, Chinmay Kulkarni, and Joshua Sunshine. Best Paper Honourable MentionIn Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems (CHI’20).[PDF][BibTeX] Defining Visual Narratives for Mathematics DeclarativelyMax Krieger, Wode Ni, and Joshua Sunshine.Evaluation and Usability of Programming Languages and Tools (PLATEAU 2019), co-located with UIST.[PDF][slides] Designing Declarative Language Tutorials: a Guided and Individualized ApproachAnael Kuperwajs Cohen, Wode Ni, and Joshua Sunshine.Evaluation and Usability of Programming Languages and Tools (PLATEAU 2019), co-located with UIST.[PDF][slides] Substance and Style: domain-specific languages for mathematical diagramsWode Ni*, Katherine Ye*, Joshua Sunshine, Jonathan Aldrich, and Keenan Crane. Domain-Specific Language Design and Implementation (DSLDI 2017), co-located with SPLASH.[PDF][slides][www][repo] Whiteboard Scanning Using Super-ResolutionWode Ni.Dickinson College Honors Theses. Paper 221.[PDF] ExperienceMicrosoft Research 2020.5 -Research Intern Carnegie Mellon University, Research Experiences for Undergraduate 2017.5 - 2017.8Research AssistantPenrose is a system that automatically visualizes mathematics using two domain-specific languages: Substance and Style. Co-advised by Jonathan Aldrich, Keenan Crane, Joshua Sunshine, and Katherine Ye, I designed and implemented the Style language, and extended the Substance language to support functions and logically quantified statements. Columbia University, Computer Graphics and User Interfaces Lab 2017.1 - 2017.5Research AssistantWorked with prof. Steven Feiner, on Cyber Affordance Visualization in Augumented Reality project. Developed a Microsoft Hololens application that visualizes the Columbia campus in AR environment. AsiaInfo 2015.6 - 2015.8Software Engineering InternWorked on server-side web applications and server deployment tools. MentoringMax Krieger (CMU, independent research &amp; REUSE) CMU, 2018 - NowCourtney Miller (New College of Florida, REUSE) CMU, 2019Anael Kuperwajs Cohen (Macalester College, REUSE) CMU, 2019 Honors &amp; AwardsCHI’20 Best Paper Honourable Mention Award CMU, 2020Phi Beta Kappa Dickinson, 2018Excellence in Computer Science Award Columbia, 2018Travel Award PL Mentoring Workshop (PLMW) SPLASH, 2018Tau Beta Pi, Engineering Honor Society Columbia, 2017Computer Science Departmental Honors Dickinson, 2016Pi Mu Epsilon, Mathematics Honor Society Dickinson, 2016Upsilon Pi Epsilon, Computer Science Honor Society Dickinson, 2016Alpha Lambda Delta, First year Honor Society Dickinson, 2013John Montgomery Scholarship Dickinson, 2013 TeachingTeaching Assistant, Programming Languages and Translators (COMS 4115) Columbia, 2017 - 2018Teaching Assistant, Introduction to Java II (COMP 132) Dickinson, 2016Peer Tutor, Data Structures and Problem Solving (COMP 232) Dickinson, 2016Computer Lab Consultant Dickinson, 2014 - 2016 ServiceReviewer CHI 2021Research Experiences for Undergraduates in Software Engineering Admission Committee CMU, 2019 - 2020 /* table th:first-of-type { width: 20%; } table th:nth-of-type(2) { width: 30%; } table th:nth-of-type(3) { width: 50%; } */ /* http://meyerweb.com/eric/tools/css/reset/ v2.0 | 20110126 License: none (public domain) */ /* html, */ article body, article main, article div, article span, article applet, article object, article iframe, article h1, article h2, article h3, article h4, article h5, article h6, article p, article blockquote, article pre, article a, article abbr, article acronym, article address, article big, article cite, article code, article del, article dfn, article em, article img, article ins, article kbd, article q, article s, article samp, article small, article strike, article strong, article sub, article sup, article tt, article var, article b, article u, article i, article center, article dl, article dt, article dd, article ol, article ul, article li, article fieldset, article form, article label, article legend, article table, article caption, article tbody, article tfoot, article thead, article tr, article th, article td, article article, article aside, article canvas, article details, article embed, article figure, article figcaption, article footer, /* article header, */ article hgroup, article menu, article nav, article output, article ruby, article section, article summary, article time, article mark, article audio, article video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; } /* HTML5 display-role reset for older browsers */ article article, article aside, article details, article figcaption, article figure, article footer, article header, article hgroup, article menu, article nav, article section { display: block; } article body { line-height: 1; } article ol, article ul { list-style: none; } article blockquote, article q { quotes: none; } article blockquote:before, article blockquote:after, article q:before, article q:after { content: \"\"; content: none; } article table { border-collapse: collapse; border-spacing: 0; } article br { margin-bottom: 0em; /* 设定 与下面间距1个字符， 1em也可以设为16px等 */ } /* end of reset */ article pre { display: block; font-family: monospace; white-space: pre; margin: 1em 0px; } article{ font: normal normal 400; font-size: 120%; line-height: 1.5em; /*also written as... font: normal normal 400 100%/1.5em;*/ font-family: \"Helvetica\", sans-serif; margin: 0.5in 0.5in 0.5in 0.5in; /* margin-top: 1em; margin-left: 1em; */ } article strong { font-weight: bold; } p strong { font-weight: bold; } article em { font-style: italic; } article h1 { font-family: \"Avenir Next\", sans-serif; text-align: center; /* font-size: 50pt; */ font-size: 300%; font-weight: lighter; position: relative; line-height: 1.2em; position: relative; /* left: 28%; */ } h1 strong { font-weight: normal !important; line-height: 1em; } /* Section headers */ article h2 { font-family: \"Avenir Next\", sans-serif; /* font-size: 20pt; */ font-size: 200%; text-align: center; font-weight: normal; display: flex; /* line-height: 1.5em; */ margin-top: 0.7em; margin-bottom: 0.5em; width: 100%; } article h2:after { border-bottom: 1.7px dashed #d3d3d3; /* height: 0.8em; */ margin-left: 10px; content: \"\"; flex: 1; } h3 strong { /* line-height: 2.5em; */ } article h3 { margin-top: 10px; } article code { font-family: \"Palatino\"; font-style: italic; float: right; } article li:before { content: \"-\"; position: relative; left: -0.5em; } article li { /*second line indent*/ padding-left: 2.25em; text-indent: -1.25em; /*color: #777;*/ } #contact-info { text-align: center; position: relative; font-weight: lighter; color: #ccc; /* font-family: Menlo,monospace,sans-serif; */ font-size: 80%; } article #contact-info a { text-decoration: none; } article a { text-decoration: none; color: rgb(20, 116, 151); } article hr { visibility: hidden; height: 0mm; }"},{"title":"","date":"2021-05-21T06:09:01.230Z","updated":"2021-05-21T06:09:01.230Z","comments":false,"path":"about/20210521_update/en/index.html","permalink":"http://shizhonggan.github.io/about/20210521_update/en/index.html","excerpt":"","text":"Paxton GAN shizhongan.github.io 15822523657 gan_shizhong@163.com EducationCarnegie Mellon University 2018.9 - Ph.D. in Software Engineering Co-advised by Ken Koedinger and Josh Sunshine Columbia University 2016.9 - 2018.5 B.S. in Computer Science, Magna Cum Laude Vision, Graphics track Dickinson College 2013.9 - 2016.5 B.S. in Computer Science, Summa Cum Laude Computer Science Departmental Honors PublicationsPenrose: From Mathematical Notation to Beautiful DiagramsKatherine Ye, Wode Ni, Max Krieger, Dor Ma’ayan, Joshua Sunshine, Jonathan Aldrich, and Keenan Crane.ACM Transactions on Graphics (SIGGRAPH’20).[PDF][BibTeX][www][repo] How Domain Experts Create Conceptual Diagrams and Implications for Tool DesignDor Ma’ayan*, Wode Ni*, Katherine Ye, Chinmay Kulkarni, and Joshua Sunshine. Best Paper Honourable MentionIn Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems (CHI’20).[PDF][BibTeX] Defining Visual Narratives for Mathematics DeclarativelyMax Krieger, Wode Ni, and Joshua Sunshine.Evaluation and Usability of Programming Languages and Tools (PLATEAU 2019), co-located with UIST.[PDF][slides] Designing Declarative Language Tutorials: a Guided and Individualized ApproachAnael Kuperwajs Cohen, Wode Ni, and Joshua Sunshine.Evaluation and Usability of Programming Languages and Tools (PLATEAU 2019), co-located with UIST.[PDF][slides] Substance and Style: domain-specific languages for mathematical diagramsWode Ni*, Katherine Ye*, Joshua Sunshine, Jonathan Aldrich, and Keenan Crane. Domain-Specific Language Design and Implementation (DSLDI 2017), co-located with SPLASH.[PDF][slides][www][repo] Whiteboard Scanning Using Super-ResolutionWode Ni.Dickinson College Honors Theses. Paper 221.[PDF] ExperienceMicrosoft Research 2020.5 -Research Intern Carnegie Mellon University, Research Experiences for Undergraduate 2017.5 - 2017.8Research AssistantPenrose is a system that automatically visualizes mathematics using two domain-specific languages: Substance and Style. Co-advised by Jonathan Aldrich, Keenan Crane, Joshua Sunshine, and Katherine Ye, I designed and implemented the Style language, and extended the Substance language to support functions and logically quantified statements. Columbia University, Computer Graphics and User Interfaces Lab 2017.1 - 2017.5Research AssistantWorked with prof. Steven Feiner, on Cyber Affordance Visualization in Augumented Reality project. Developed a Microsoft Hololens application that visualizes the Columbia campus in AR environment. AsiaInfo 2015.6 - 2015.8Software Engineering InternWorked on server-side web applications and server deployment tools. MentoringMax Krieger (CMU, independent research &amp; REUSE) CMU, 2018 - NowCourtney Miller (New College of Florida, REUSE) CMU, 2019Anael Kuperwajs Cohen (Macalester College, REUSE) CMU, 2019 Honors &amp; AwardsCHI’20 Best Paper Honourable Mention Award CMU, 2020Phi Beta Kappa Dickinson, 2018Excellence in Computer Science Award Columbia, 2018Travel Award PL Mentoring Workshop (PLMW) SPLASH, 2018Tau Beta Pi, Engineering Honor Society Columbia, 2017Computer Science Departmental Honors Dickinson, 2016Pi Mu Epsilon, Mathematics Honor Society Dickinson, 2016Upsilon Pi Epsilon, Computer Science Honor Society Dickinson, 2016Alpha Lambda Delta, First year Honor Society Dickinson, 2013John Montgomery Scholarship Dickinson, 2013 TeachingTeaching Assistant, Programming Languages and Translators (COMS 4115) Columbia, 2017 - 2018Teaching Assistant, Introduction to Java II (COMP 132) Dickinson, 2016Peer Tutor, Data Structures and Problem Solving (COMP 232) Dickinson, 2016Computer Lab Consultant Dickinson, 2014 - 2016 ServiceReviewer CHI 2021Research Experiences for Undergraduates in Software Engineering Admission Committee CMU, 2019 - 2020 /* table th:first-of-type { width: 20%; } table th:nth-of-type(2) { width: 30%; } table th:nth-of-type(3) { width: 50%; } */ /* http://meyerweb.com/eric/tools/css/reset/ v2.0 | 20110126 License: none (public domain) */ /* html, */ article body, article main, article div, article span, article applet, article object, article iframe, article h1, article h2, article h3, article h4, article h5, article h6, article p, article blockquote, article pre, article a, article abbr, article acronym, article address, article big, article cite, article code, article del, article dfn, article em, article img, article ins, article kbd, article q, article s, article samp, article small, article strike, article strong, article sub, article sup, article tt, article var, article b, article u, article i, article center, article dl, article dt, article dd, article ol, article ul, article li, article fieldset, article form, article label, article legend, article table, article caption, article tbody, article tfoot, article thead, article tr, article th, article td, article article, article aside, article canvas, article details, article embed, article figure, article figcaption, article footer, /* article header, */ article hgroup, article menu, article nav, article output, article ruby, article section, article summary, article time, article mark, article audio, article video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; } /* HTML5 display-role reset for older browsers */ article article, article aside, article details, article figcaption, article figure, article footer, article header, article hgroup, article menu, article nav, article section { display: block; } article body { line-height: 1; } article ol, article ul { list-style: none; } article blockquote, article q { quotes: none; } article blockquote:before, article blockquote:after, article q:before, article q:after { content: \"\"; content: none; } article table { border-collapse: collapse; border-spacing: 0; } article br { margin-bottom: 0em; /* 设定 与下面间距1个字符， 1em也可以设为16px等 */ } /* end of reset */ article pre { display: block; font-family: monospace; white-space: pre; margin: 1em 0px; } article{ font: normal normal 400; font-size: 120%; line-height: 1.5em; /*also written as... font: normal normal 400 100%/1.5em;*/ font-family: \"Helvetica\", sans-serif; margin: 0.5in 0.5in 0.5in 0.5in; /* margin-top: 1em; margin-left: 1em; */ } article strong { font-weight: bold; } p strong { font-weight: bold; } article em { font-style: italic; } article h1 { font-family: \"Avenir Next\", sans-serif; text-align: center; /* font-size: 50pt; */ font-size: 300%; font-weight: lighter; position: relative; line-height: 1.2em; position: relative; /* left: 28%; */ } h1 strong { font-weight: normal !important; line-height: 1em; } /* Section headers */ article h2 { font-family: \"Avenir Next\", sans-serif; /* font-size: 20pt; */ font-size: 200%; text-align: center; font-weight: normal; display: flex; /* line-height: 1.5em; */ margin-top: 0.7em; margin-bottom: 0.5em; width: 100%; } article h2:after { border-bottom: 1.7px dashed #d3d3d3; /* height: 0.8em; */ margin-left: 10px; content: \"\"; flex: 1; } h3 strong { /* line-height: 2.5em; */ } article h3 { margin-top: 10px; } article code { font-family: \"Palatino\"; font-style: italic; float: right; } article li:before { content: \"-\"; position: relative; left: -0.5em; } article li { /*second line indent*/ padding-left: 2.25em; text-indent: -1.25em; /*color: #777;*/ } #contact-info { text-align: center; position: relative; font-weight: lighter; color: #ccc; /* font-family: Menlo,monospace,sans-serif; */ font-size: 80%; } article #contact-info a { text-decoration: none; } article a { text-decoration: none; color: rgb(20, 116, 151); } article hr { visibility: hidden; height: 0mm; }"}],"posts":[{"title":"Paramiko执行后台命令报错","slug":"Python/paramiko","date":"2021-05-20T01:39:04.000Z","updated":"2021-05-20T05:29:52.844Z","comments":true,"path":"2021/05/20/Python/paramiko/","link":"","permalink":"http://shizhonggan.github.io/2021/05/20/Python/paramiko/","excerpt":"","text":"1. 报错关键字 paramiko Exception ignored in: &lt;function BufferedFile.__del__ at 0x000001E62C28A048&gt; TypeError: ‘NoneType’ object is not callable 2. 代码12345import paramikosshc = paramiko.SSHClient()sshc.set_missing_host_key_policy(paramiko.AutoAddPolicy())sshc.connect(host, username=username,port=port,pkey=key)stdin1, stdout1, stderr1 = sshc.exec_command(&quot;setsid ...(省略)... &amp;&quot;) setsid是linux系统命令，如果再window下写的代码此处必然无法运行。可以先将setsid相关代码通过sshc.open_sftp()上传到服务端，然后通过sshc.exec_command(“python setsid.py”)运行脚本。 nohup 与 setsid 区别参考：http://www.tang-lei.com/2019/03/04/linux-nohup-setsid-使用区别/ nohup nohup命令的功能就是使用当前进程忽略hangup信号，从而继续执行。默认的标准输入输出都会被重定向到当前目录下的nohup.out文件里。一般我们配置在命令的末尾加上 &amp; 来配合使用。 可以通过 &gt;filename 2&gt;&amp;1 来重定向默认的输入输出, 如：”nohup minio server :9001 /mnt/test/ &gt; /var/log/minio_test.log 2&gt;&amp;1 &amp;”, 通过jobs 可以看到该进程的父进程是当前shell的进程号 作用说明：进程在后台执行；忽略hangup信号；重定向日志输出 &amp; &amp; 代表后台运行程序。如果终端退出，则该进程会结束。通常配合nohup和setsid使用 setsid setsid 就是set session id 的意思。表示该命令运行的进程是一个新的session。因此其父进程不属于当前终端。实际上setsid运行的进程，其父进程id(ppid)为1(init进程的id)。 如：”setsid minion server :9001 /mnt/test/ &gt; /var/log/minio_test.log &amp;”。注意：setsid输出重定向必须手动指定。 结论 由于nohup的父进程与当前的worker有关，当我们Ctrl+C的时候，也会把其给kill掉。而setsid的父进程是init,所以当我们退出worker的时候，并不会kill掉该服务 3. 输出123456789Exception ignored in: &lt;function BufferedFile.__del__ at 0x000001E62C28A048&gt;Traceback (most recent call last): File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\paramiko\\file.py&quot;, line 66, in __del__ File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\paramiko\\channel.py&quot;, line 1392, in close File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\paramiko\\channel.py&quot;, line 991, in shutdown_write File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\paramiko\\channel.py&quot;, line 963, in shutdown File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\paramiko\\channel.py&quot;, line 1246, in _send_eof File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\paramiko\\message.py&quot;, line 232, in add_intTypeError: &#x27;NoneType&#x27; object is not callable 4. 解决方法12345678910111213141516171819202122## main.pyimport paramikosshc = paramiko.SSHClient()sshc.set_missing_host_key_policy(paramiko.AutoAddPolicy())sshc.connect(host, username=username,port=port,pkey=key)sftp = sshc.open_sftp()localfile = &quot;cmd.py&quot;remotepath = &quot;/path/cmd.py&quot;sftp.put(localfile, remotepath)stdin, stdout1, stderr = sshc.exec_command(&quot;python &quot;+&quot;cmd.py&quot;) sshc.close()## cmd.pyimport osimport sysSnapID = &quot;snap-096b5af48e45fe262&quot;datapath = &quot;/mnt/snap/8572302701/hda/data.gz.aes&quot;opensslcmd = os.popen( # 此处选用os.popen，主要是怀疑paramiko存在问题&quot;setsid ...(your shell commands)... &amp;&quot;)sys.exit() 将代码最后添加一个sys.exit()程序恢复正常,其实主要ssh返回的结果缓冲释放过快未读完，就产生报错了。也有说，加一个sleep 1秒也可以解决。","categories":[{"name":"运维","slug":"运维","permalink":"http://shizhonggan.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"paramiko","slug":"paramiko","permalink":"http://shizhonggan.github.io/tags/paramiko/"},{"name":"python","slug":"python","permalink":"http://shizhonggan.github.io/tags/python/"},{"name":"DevOps","slug":"DevOps","permalink":"http://shizhonggan.github.io/tags/DevOps/"}]},{"title":"学术论文免费下载方法","slug":"Tips/PaperDownload","date":"2021-05-18T13:44:23.000Z","updated":"2021-05-20T01:29:42.921Z","comments":true,"path":"2021/05/18/Tips/PaperDownload/","link":"","permalink":"http://shizhonggan.github.io/2021/05/18/Tips/PaperDownload/","excerpt":"","text":"本文仅测试了IEEE论文的下载，亲测有效。 打开网址scihubtw.tw，网站如下： IEEE搜索你需要下载的文章，打开文章所在页面如下图所示，其中红色框内的链接和DOI编号都可以在SCI-HUB中搜索，然后即可下载。 温馨提示：SCI-HUB网址会经常变更，需要多加留意啊~","categories":[{"name":"Tips","slug":"Tips","permalink":"http://shizhonggan.github.io/categories/Tips/"}],"tags":[]},{"title":"Docker 常用命令方法","slug":"Docker/basic_method","date":"2021-04-28T03:03:04.000Z","updated":"2021-04-30T08:58:16.046Z","comments":true,"path":"2021/04/28/Docker/basic_method/","link":"","permalink":"http://shizhonggan.github.io/2021/04/28/Docker/basic_method/","excerpt":"","text":"镜像搜索、拉取和使用123456docker search ubuntudocker pull ubuntudocker run -it --name test ubuntu /bin/bashdocker start testdocker restart testdocker stop test 将容器保存为镜像，便于重复使用12345apt-get install net-toolsapt-get install -y inetutils-pingapt-get install iproute2docker commit -a &quot;作者名&quot; -m &quot;镜像描述&quot; 容器ID 新镜像命名docker commit -a &quot;paxton&quot; -m &quot;ubuntu with modified apt source.list&quot; ovs1 mdubuntu 自定义网络 docker的网络通信基于安装时新建的docker0网桥，可以与外网，本虚拟机以及其他虚拟机通信 在两台虚拟机上创建自定义网络，并为新建容器分配自定义网络下的ip地址，两台虚拟机分配不同网段，配置操作如下： 虚拟机1-ip：192.168.255.129 容器网段 10.0.30.0/24 容器ip：10.0.30.10 虚拟机1操作如下： 创建自定义网络，ifconfig可发现多出一个网桥 123456## h0docker network create --subnet=10.0.30.0/24 --opt com.docker.network.driver.mtu=1450 docker-br0 docker run -itd --net docker-br0 --ip 10.0.30.10 --name h0 mdubuntu /bin/bash## h1docker network create --subnet=10.0.60.0/24 --opt com.docker.network.driver.mtu=1450 docker-br1 docker run -itd --net docker-br1 --ip 10.0.60.10 --name h1 ubuntu /bin/bash 此时，新建的两个虚拟机相互无法ping通。可以通过增加路由的方式解决： 123456ip route show # 查看一下当前路ip route add 10.0.50.0/24 via 10.0.30.1 dev br-e6259dd72430 # h0ip route add 10.0.30.0/24 via 192.168.6.83 dev ens3 # h1ip route add 10.0.60.0/24 via 119.254.169.244 dev ens4 https://www.cnblogs.com/tengj/p/5357879.htmlhttps://blog.csdn.net/Silvester123/article/details/80867168","categories":[{"name":"Docker","slug":"Docker","permalink":"http://shizhonggan.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://shizhonggan.github.io/tags/Docker/"}]},{"title":"Docker 容器内网络无法连接","slug":"Docker/netdisconnected","date":"2021-04-27T08:09:04.000Z","updated":"2021-04-27T08:12:03.731Z","comments":true,"path":"2021/04/27/Docker/netdisconnected/","link":"","permalink":"http://shizhonggan.github.io/2021/04/27/Docker/netdisconnected/","excerpt":"","text":"操作系统ubuntu16docker 参照官方教程安装最新版本 问题描述最近迷恋上了docker，因为官方提供的ubuntu镜像只有64M!!!十分轻便。然而基于该镜像生成的容器无法联网，参见下面代码错误，然后试了试其它镜像，依旧无法联网。 12345678910111213141516171819202122root@gan# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEubuntu latest a2a15febcdf3 7 days ago 64.2MBroot@e6a2c5bec004:/# apt updateErr:1 http://security.ubuntu.com/ubuntu bionic-security InRelease Connection failed [IP: 91.189.88.162 80]Err:2 http://archive.ubuntu.com/ubuntu bionic InRelease Connection failed [IP: 91.189.88.149 80]Err:3 http://archive.ubuntu.com/ubuntu bionic-updates InRelease Connection failed [IP: 91.189.88.24 80]Err:4 http://archive.ubuntu.com/ubuntu bionic-backports InRelease Connection failed [IP: 91.189.88.149 80]Reading package lists... DoneBuilding dependency treeReading state information... DoneAll packages are up to date.W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/bionic/InRelease Conn ection failed [IP: 91.189.88.149 80]W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/bionic-updates/InRelea se Connection failed [IP: 91.189.88.24 80]W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/bionic-backports/InRel ease Connection failed [IP: 91.189.88.149 80]W: Failed to fetch http://security.ubuntu.com/ubuntu/dists/bionic-security/InRel ease Connection failed [IP: 91.189.88.162 80]W: Some index files failed to download. They have been ignored, or old ones used instead. 结局办法遍搜国内全网，给出的解决办法都没有解决！例如：Docker容器内不能联网的6种解决方案stack overflow中的高分回复 Docker apt-get update fails中文这六种解决方法，不要轻易动用，除非你之前做过大量的网络设置，负责这些问题基本不会出现。 第一步：首先查看docker虚拟网卡，查看mtu值，如果是1500(默认，或者更大)，则需要修改为1450或者更小，/etc/docker/daemon.json 。此外，可以在daemon.json中修改镜像的存储路径，以免占用太多的系统内存；修改mtu值便可以联网了；dns根据情况修改，可以不加吧。123456789101112131415161718192021222324252627282930313233root@gan:/etc/docker# ifconfigdocker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1450 inet 172.17.0.1 netmask 255.255.0.0 broadcast 172.17.255.255 inet6 fe80::42:7eff:fee3:87ab prefixlen 64 scopeid 0x20&lt;link&gt; ether 02:42:7e:e3:87:ab txqueuelen 0 (Ethernet) RX packets 4518 bytes 281479 (281.4 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 5733 bytes 17386562 (17.3 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0root@gan# vim /etc/docker/daemon.json&#123; &quot;data-root&quot;: &quot;/home/ec2-user/software/docker-data&quot;, &quot;storage-driver&quot;: &quot;overlay2&quot;, &quot;mtu&quot;: 1450, &quot;dns&quot;: [&quot;you_server_dns&quot;,&quot;8.8.8.8&quot;]&#125;##启动 systemctl start docker## 守护进程重启sudo systemctl daemon-reload## 重启docker服务sudo systemctl restart docker## 关闭dockersudo systemctl stop docker## 重启docker服务sudo service docker restart## 关闭dockersudo service docker stop———————————————— 第二步：再按照其它方法慢慢修改吧总结有时候搜索不到答案，就细致读一下官方文档，按照官方文档操作一般不会遇到问题，否则就是这个软件的BUG了。 哎，一个MTU值搞了我两天时间，还学习了一下计算机网络原理，仍然无解！ MTU [引自百度百科]通信术语 最大传输单元（Maximum Transmission Unit，MTU）是指一种通信协议的某一层上面所能通过的最大数据包大小（以字节为单位）。最大传输单元这个参数通常与通信接口有关（网络接口卡、串口等）。 因为协议数据单元的包头和包尾的长度是固定的，MTU越大，则一个协议数据单元的承载的有效数据就越长，通信效率也越高。MTU越大，传送相同的用户数据所需的数据包个数也越低。 MTU也不是越大越好，因为MTU越大， 传送一个数据包的延迟也越大；并且MTU越大，数据包中 bit位发生错误的概率也越大。 MTU越大，通信效率越高而传输延迟增大，所以要权衡通信效率和传输延迟选择合适的MTU。","categories":[{"name":"Docker","slug":"Docker","permalink":"http://shizhonggan.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://shizhonggan.github.io/tags/Docker/"}]},{"title":"软件定义网络（SDN）学习笔记(4)--OVS系统架构","slug":"SDN/SDN03_ovs","date":"2021-04-26T13:31:04.000Z","updated":"2021-04-27T09:01:10.593Z","comments":true,"path":"2021/04/26/SDN/SDN03_ovs/","link":"","permalink":"http://shizhonggan.github.io/2021/04/26/SDN/SDN03_ovs/","excerpt":"","text":"SDN学习目录 SDN学习笔记(0)–wireshark抓包分析 SDN学习笔记(1)–iPerf和Netperf性能测试 SDN学习笔记(2)–Scapy交互式数据处理与Postman HTTP请求测试 SDN学习笔记(3)–OVS系统架构 1 基本概念1.1 交换机交换机（Switch）是一种在通信系统中完成信息交换功能的设备。它可以为接入交换机的任意两个网络节点提供独享的电信号通路。最常见的交换机是以太网交换机。其他常见的还有电话语音交换机、光纤交换机等。目前，二层交换技术发展比较成熟，二层交换机（Layer 2 switches）是指只支持OSI第二层（数据链路层）交换技术的交换机。 1.2 工作原理交换机拥有一条很高带宽的背部总线和内部交换矩阵。交换机的所有的端口都挂接在这条背部总线上，控制电路收到数据包以后，处理端口会查找内存中的地址对照表以确定目的MAC（网卡的硬件地址）的NIC（网卡）挂接在哪个端口上，通过内部交换矩阵迅速将数据包传送到目的端口，目的MAC若不存在，广播到所有的端口，接收端口回应后交换机会“学习”新的MAC地址，并把它添加入内部MAC地址表中，并刷新CAM表，表中有MAC地址，对应的端口号，端口所属的VLAN信息，交换机在二层转发数据时根据CAM表查找出端口。使用交换机也可以把网络“分段”，通过对照IP地址表，交换机只允许必要的网络流量通过交换机。通过交换机的过滤和转发，可以有效的减少冲突域，但不能划分广播域。交换机在同一时刻可进行多个端口对之间的数据传输。每一端口都可视为独立的网段，连接在其上的网络设备独自享有全部的带宽，无须同其他设备竞争使用。当节点A向节点D发送数据时，节点B可同时向节点C发送数据，而且这两个传输都享有网络的全部带宽，有着自己的虚拟连接。 1.3 作用与功能交换机的常见功能如下： MAC地址学习：以太网交换机了解每一端口相连设备的MAC地址，并将地址同相应的端口映射起来存放在交换机缓存中的MAC地址表中。 转发/过滤：当一个数据帧的目的地址在MAC地址表中有映射时，它被转发到连接目的节点的端口而不是所有端口（如该数据帧为广播/组播帧则转发至所有端口）。 消除回路：当交换机包括一个冗余回路时，以太网交换机通过生成树协议避免回路的产生，同时允许存在后备路径。 2 Open vSwitch (OVS)Open vSwitch（OVS）是一个高质量的、多层虚拟交换机。OVS遵循开源Apache2.0许可，通过可编程扩展，OVS可以实现大规模网络的自动化（配置、管理、维护），同时支持现有标准管理接口和协议（比如NetFlow、sFlow、SPAN、RSPAN、CLI、LACP、802.1ag等）。此外OVS支持多种Linux虚拟化技术，包括Xen/XenServer，KVM，和VirtualBox等。虽然是虚拟交换机，但是其工作原理与物理交换机类似。在虚拟交换机的实现中，其两端分别连接着物理网卡和多块虚拟网卡，同时虚拟交换机内部会维护一张映射表，根据MAC地址寻找对应的虚拟机链路进而完成数据转发。 OVS交换机有两种工作模式 一种为SDN交换机，另一种为普通交换机。作为SDN交换机时，显示Fail_mode为Secure，在这种模式下OVS交换机需要控制器发送转发规则，指挥交换机去工作 作为普通交换机时，显示Fail_mode是Standalone。其和物理交换机工作模式一样，记录端口号和MAC地址的对应关系，基于对应关系转发数据帧。交换机默认状态是SDN交换机。 OVS 架构分为三个部分: 内核空间：包含了流表（Flow Table）和Datapath模块（类似于网桥，主要负责对数据分组进行操作）。 用户空间：运行着OVS的守护进程(Open vSwitch Daemon, vswitchd)和数据库(Open vSwitch Database, ovsdb)，他们是ovs的核心功能模块。 vswitchd类似于OVS的心脏，维持OVS的声明周期。可以配置一系列特性： 基于MAC地址学习的二层交换 支持IEEE802.1Q VLAN sFlow监测 连接OpenFlow控制器 通过Netlink协议与内核模块Datapath直接通信 ovsdb相当于OVS的大脑，存储OVS的配置信息和数据流信息。 配置管理层：包括ovs-dpctl, ovs-ofctl, ovs-appctl, ovs-vsctl和ovsdb-tool等，主要用于和vswitchd,ovsdb之间进行交互操作以及ovs的安装配置和部署 3. OVS安装使用OVS可以运行在任何基于Linux的虚拟化平台，包括KVM, VirtualBox, Xen等，其代码都是基于C编写，所以易于移植到其他环境。安装有两种方法：一种通过二进制文件安装apt-get；另外一种是源码安装。 3.1 docker安装ovsdocker 安装参见【Ubuntu安装Docker与最常用配置】 12docker pull ubuntudocker run -it --name ovs1 ubuntu /bin/bash note:进入容器后，若发现无法联网请参见文章【Docker容器内网络无法连接】 1 https://blog.csdn.net/Silvester123/article/details/80867168","categories":[{"name":"SDN","slug":"SDN","permalink":"http://shizhonggan.github.io/categories/SDN/"}],"tags":[{"name":"网络架构","slug":"网络架构","permalink":"http://shizhonggan.github.io/tags/%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/"},{"name":"SDN","slug":"SDN","permalink":"http://shizhonggan.github.io/tags/SDN/"},{"name":"OVS","slug":"OVS","permalink":"http://shizhonggan.github.io/tags/OVS/"}]},{"title":"Ubuntu安装Docker与最常用配置","slug":"Docker/docker_install","date":"2021-04-26T02:54:04.000Z","updated":"2021-04-28T03:02:58.009Z","comments":true,"path":"2021/04/26/Docker/docker_install/","link":"","permalink":"http://shizhonggan.github.io/2021/04/26/Docker/docker_install/","excerpt":"","text":"1 docker 介绍Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），我们用社区版就可以了。 Docker的应用场景 Web 应用的自动化打包和发布。 自动化测试和持续集成、发布。 在服务型环境中部署和调整数据库或其他的后台应用。 从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。 Docker 的优点 Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。 快速，一致地交付您的应用程序 Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。 容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案： 您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。 他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。 当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。 测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。 响应式部署和扩展 Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。 Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。 在同一硬件上运行更多工作负载 Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。 安装ubuntu16.04安装成功；ubuntu14.04安装失败【各种报错啊，有耐心的可以慢慢去解决】。 123456789101112131415161718192021$ sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak$ sudo rm /etc/apt/sources.list$ sudo vi /etc/apt/sources.listecho \\&quot;deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse&quot; \\&gt;&gt; /etc/apt/sources.list$ sudo apt-get update$ sudo apt-get upgrade 12$ sudo apt-get remove docker docker-engine docker.io containerd runc # 如果存在旧版本地docker产品先卸载$ Install using the repository1234567$ sudo apt-get update$ sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg$ sudo apt-key fingerprint 0EBFCD88$ echo \\ &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null INSTALL DOCKER CE123$ sudo apt-get update$ sudo apt-get install docker-ce docker-ce-cli containerd.io$ sudo docker run hello-world docker 更改工作存储路径【可选操作】1$ sudo systemctl stop docker Runtime directory and storage driver You may want to control the disk space used for Docker images, containers, and volumes by moving it to a separate partition.To accomplish this, set the following flags in the daemon.json file:1234&#123; &quot;data-root&quot;: &quot;/mnt/docker-data&quot;, ## 修改成你自己的目录 &quot;storage-driver&quot;: &quot;overlay2&quot;&#125; 12$ sudo service docker start # 重启$ sudo systemctl start docker Docker 更改容器日志文件大小【可选操作】 docker容器的日志文件会不断挤占系统资源内存，因此需要限定docker日志文件大小，实现docker日志定期处理，具体方法如下： 123456789# 查看文件夹子文件所占内存大小du -h --max-depth=1 /home/ec2-user/dirname/# vim /etc/docker/daemon.json &#123; &quot;log-driver&quot;:&quot;json-file&quot;, &quot;log-opts&quot;: &#123;&quot;max-size&quot;:&quot;500m&quot;, &quot;max-file&quot;:&quot;1&quot;&#125; # max-size=500m，意味着一个容器日志大小上限是500M，max-file=3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json。&#125; ## 重启docker守护进程 # systemctl daemon-reload 、# systemctl restart docker","categories":[{"name":"Docker","slug":"Docker","permalink":"http://shizhonggan.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://shizhonggan.github.io/tags/Docker/"}]},{"title":"面向对象编程(python)","slug":"Python/ObjectOrientedPrograming","date":"2021-04-26T02:54:04.000Z","updated":"2021-05-13T09:16:16.755Z","comments":true,"path":"2021/04/26/Python/ObjectOrientedPrograming/","link":"","permalink":"http://shizhonggan.github.io/2021/04/26/Python/ObjectOrientedPrograming/","excerpt":"","text":"与面向过程相比，面向对象优缺点如下： 优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护 数据抽象的概念可以在保持外部接口不变的情况下改变内部实现，从而减少甚至避免对外界的干扰； 通过继承大幅减少冗余的代码，并可以方便地扩展现有代码，提高编码效率，也减低了出错概率，降低软件维护的难度； 结合面向对象分析、面向对象设计，允许将问题域中的对象直接映射到程序中，减少软件开发过程中中间环节的转换过程； 通过对对象的辨别、划分可以将软件系统分割为若干相对独立的部分，在一定程度上更便于控制软件复杂度； 以对象为中心的设计可以帮助开发人员从静态（属性）和动态（方法）两个方面把握问题，从而更好地实现系统； 通过对象的聚合、联合可以在保证封装与抽象的原则下实现对象在内在结构以及外在功能上的扩充，从而实现对象由低到高的升级。 缺点：性能比面向过程低 自己写","categories":[{"name":"Python","slug":"Python","permalink":"http://shizhonggan.github.io/categories/Python/"}],"tags":[{"name":"OOP","slug":"OOP","permalink":"http://shizhonggan.github.io/tags/OOP/"}]},{"title":"软件定义网络（SDN）学习笔记(3)--Scapy交互式数据处理与Postman HTTP请求测试","slug":"SDN/SDN02_Scapy_Postman","date":"2021-04-20T01:15:22.000Z","updated":"2021-04-21T02:28:39.182Z","comments":true,"path":"2021/04/20/SDN/SDN02_Scapy_Postman/","link":"","permalink":"http://shizhonggan.github.io/2021/04/20/SDN/SDN02_Scapy_Postman/","excerpt":"","text":"SDN学习目录 SDN学习笔记(0)–wireshark抓包分析 SDN学习笔记(1)–iPerf和Netperf性能测试 SDN学习笔记(2)–Scapy交互式数据处理与Postman HTTP请求测试 SDN学习笔记(3)–OVS系统架构 ScapyScapy 是基于python编写的交互式数据包处理程序，使用pyhon解释器作为命令面板。可以用来发送、嗅探、解析和伪造网络数据包，通常用于网络攻击和测试。 Scapy 不仅可以实现扫描、路由跟踪、探测、单元测试、攻击和发现网络等传统功能，也可以代替hping、arpspoof、arp-sk、arping、p0f,实现部分Namp、Tcpdump和tshark的功能。 它能够伪造或解码大量的网络协议数据包，能够发送、捕捉、匹配请求和回复包等。 它还可以发送无效数据帧、诸如修改的802.11数据帧、在WEP熵解码加密通道(VOIP)、ARP缓存攻击(VLAN)等，这是其他工具无法完成的。 Scapy主要负责定义、发送和接收报文。 PostmanPostman是google开发的一款强大的王爷调试、发送网页HTTP请求，并能运行测试用例的Chrome插件。","categories":[{"name":"SDN","slug":"SDN","permalink":"http://shizhonggan.github.io/categories/SDN/"}],"tags":[{"name":"Scapy","slug":"Scapy","permalink":"http://shizhonggan.github.io/tags/Scapy/"},{"name":"Postman","slug":"Postman","permalink":"http://shizhonggan.github.io/tags/Postman/"}]},{"title":"MYSQL游标使用方法","slug":"SQL/mysql_cursor","date":"2021-04-19T03:18:43.247Z","updated":"2021-04-19T08:40:33.359Z","comments":true,"path":"2021/04/19/SQL/mysql_cursor/","link":"","permalink":"http://shizhonggan.github.io/2021/04/19/SQL/mysql_cursor/","excerpt":"","text":"游标游标的特性 不敏感：数据库可以选择不复制结果集 只读 不滚动：游标只能向一方向前进，并且不可以跳过任何一行数据 游标的优点 游标是针对行操作的，对从数据库中 select 查询得到的结果集的 每一行可以 进行分开的独立的相同或者不相同的操作，是一种分离的思想。 游标的缺点 性能不高 只能一行一行操作 使用游标会产生死锁，造成内存开销大 游标的适用场景 存储过程 函数 触发器 事件游标使用方法游标五步法： 一、声明一个游标: DECLARE cursor_name CURSOR FOR select_statement 这个语句声明一个游标。也可以在子程序中定义多个游标，一个块中的每一个游标必须命名唯一。声明游标后也是单条操作的。 二、打开定义的游标: OPEN cursor_name 这个语句打开先前声明的游标。 三、获得下一行数据: FETCH cursor_name INTO var_name [, var_name] … 这个语句用指定的打开游标读取下一行（如果有下一行的话），并且前进游标指针至该行。 四、需要执行的语句(增删改查):这里视具体情况而定 五、释放游标: CLOSE cursor_name 这个语句关闭先前打开的游标，注意，用完后必须关闭。 123456789101112131415161718192021222324DROP PROCEDURE UpdateImgURL;/***游标***/CREATE PROCEDURE UpdateImgURL()BEGIN -- 遍历数据结束标志DECLARE Done INT DEFAULT 0;DECLARE Imgurl CHAR(255) DEFAULT &quot;&quot;;-- 游标DECLARE RS CURSOR FOR SELECT imgurl FROM weixin_linkface_userinfo ;-- 异常处理DECLARE CONTINUE HANDLER FOR SQLSTATE &#x27;02000&#x27; SET Done = 1;-- 打开游标OPEN RS;FETCH NEXT FROM RS INTO Imgurl;REPEATIF NOT Done THEN/**update 表名 set 字段名=REPLACE (字段名,&#x27;原来的值&#x27;,&#x27;要修改的值&#x27;) where 条件 **/END IF;FETCH NEXT FROM RS INTO Imgurl;UNTIL Done END REPEAT;CLOSE rs;END/**执行存储过程**/CALL UpdateImgURL 1234567891011121314151617181920BEGIN DECLARE no_more_record INT DEFAULT 0; DECLARE pID BIGINT(20); DECLARE pValue DECIMAL(15,5); DECLARE cur_record CURSOR FOR SELECT colA, colB from tableABC; /*首先这里对游标进行定义*/ DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_record = 1; /*这个是个条件处理,针对NOT FOUND的条件,当没有记录时赋值为1*/ OPEN cur_record; /*接着使用OPEN打开游标*/ FETCH cur_record INTO pID, pValue; /*把第一行数据写入变量中,游标也随之指向了记录的第一行*/ WHILE no_more_record != 1 DO INSERT INTO testTable(ID, Value) VALUES (pID, pValue); FETCH cur_record INTO pID, pValue; END WHILE; CLOSE cur_record; /*用完后记得用CLOSE把资源释放掉*/END","categories":[{"name":"SQL","slug":"SQL","permalink":"http://shizhonggan.github.io/categories/SQL/"}],"tags":[{"name":"游标","slug":"游标","permalink":"http://shizhonggan.github.io/tags/%E6%B8%B8%E6%A0%87/"}]},{"title":"Keras学习准备[待续...]","slug":"DeepLeaning/Keras/KerasBase","date":"2021-04-17T07:54:23.000Z","updated":"2021-04-26T06:11:14.672Z","comments":true,"path":"2021/04/17/DeepLeaning/Keras/KerasBase/","link":"","permalink":"http://shizhonggan.github.io/2021/04/17/DeepLeaning/Keras/KerasBase/","excerpt":"","text":"1. 安装12345pip install tensorflowpip install tensorflow-gpupip install keras## 其他pip install pydot pydot_ng vizgraph python3-tk matplotlib 2. 主要模型 MLP(多层感知机) 全连接网络，也成为深度前馈网络或前馈神经网络。常用于简单的逻辑和线性回归问题。处理序列数据和多维数据欠佳。 CNN(卷积神经网络) 主要应用与图像或视频的分类、分割和生成等。也可用于时序数据网络 RNN(循环神经网络) 主要应用于序列数据的预测 3. 代码流程3.1 加载数据集数据集常用MNIST手写体 3. MLP 数据集 MNIST手写体 代码：https://github.com/PacktPublishing/Advanced-Deep-Learning-with-Keras","categories":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://shizhonggan.github.io/categories/Deep-Learning/"}],"tags":[]},{"title":"软件定义网络（SDN）学习笔记(1)--iPerf和Netperf性能测试","slug":"SDN/SDN01_iPerf_Netperf","date":"2021-04-15T08:15:22.000Z","updated":"2021-04-20T08:45:16.437Z","comments":true,"path":"2021/04/15/SDN/SDN01_iPerf_Netperf/","link":"","permalink":"http://shizhonggan.github.io/2021/04/15/SDN/SDN01_iPerf_Netperf/","excerpt":"","text":"SDN学习目录 SDN学习笔记(0)–wireshark抓包分析 SDN学习笔记(1)–iPerf和Netperf性能测试 SDN学习笔记(2)–Scapy交互式数据处理与Postman HTTP请求测试 SDN学习笔记(3)–OVS系统架构 1. iPerf and NetperfiPerf是网络性能测试工具，可以测试主机之间的吞吐量。iPerf具有多种参数和特性，支持协议、定时、缓冲区等参数的配置调整，能够测试TCP/UDP的最大带宽、延迟抖动、数据包丢失等统计信息。iPerf基于Server/Client的工作模式,客户端向服务端发送一定量的数据，服务端统计并计算带宽、延时和抖动等信息。 命令格式： iperf [-s|-c host] [options] Netperf也是网络性能测试工具，主要用于测试TCP或UDP和Berkeley套接字接口的批量数据传输(Bulk Data Transfer)和请求/应答(Request/Reponse)性能。Netperf工具以Client/Server方式工作，服务端是netServer，用来侦听来自客户端的连接，客户端时NetPerf，用来向服务发起网络测试。在客户端与服务端之间，首先建立一个控制连接，传递有关测试配置的信息，以及测试的结果。在控制连接建立并传递了测试配置信息以后，客户端与服务之间建立一个测试连接，用于来回传递特殊的流量，已测试网络性能。 命令格式：netperf [global options] –[test-specific options] 2. 性能测试指标 网络吞吐量：单位时间内通过某个网络(信道或接口)的数据量，吞吐量受网络的带宽或网络的额定速率限制，单位bit/s 网络延时：一个数据包从用户的计算机发送到网站服务器，然后立即从网站服务器返回用户计算机的来回时间。影响网络演示的主要因素：路由的跳数和网络的流量。交换机延时(Latency)是指从交换机接收到数据包到开始向目的端口复制数据包之间的时间间隔。有许多因素会影响交换机演示大小，如转发技术等。 抖动：用于描述包在网络中的传输延时变化，抖动越小，说明网络质量越稳定、越好。 丢包率：理想状态下发送多少数据包就能接收到多少数据包。但由于信号衰减、网络质量等诸多因素的影响并不能达到理想状态。丢包率是指测试中多丢失的数据包数量占所有发送数据包的比率。 3. iPerf和Netperf比较 比较项 iPerf Netperf 支持多线程 是 是 可以设置服务器关闭之前保持的连接数 是 否 支持组播 是 否 支持除TCP,UDP之外的协议 否 是 支持IPv6 一定程度上 是 可以输出TCP MSS指 是 否 设置测试分组大小 否 是 支持多种测试范式 否 是 4. 测试命令4.1 iPerf一、TCP测试1234567## 主机一 10.0.0.8# iperf -s # 作为服务端## 主机二# iperf -c 10.0.0.8# iperf -c 10.0.0.8 -t 32 -i 8 # 测试时间32s,输出频率8s# iperf -c 10.0.0.8 -n 2000M -i 5 # 数据包为2000M,输出频率5s## 主机三 与主机二 分别执行上述命令，可以观察主机一的测试结果， 不同时段的带宽相差比较大 二、UDP测试123## 主机一 10.0.0.8 停止iPerf TCP服务# iperf -s -u # UDP测试# iperf -c 10.0.0.8 -u -b 2000M -i 5 -l 1380 # -b 2000M 2000Mbit/s发送速率， -i 5 表示输出频率5s -l 1380表示数据包的大小为1380个字节 note: 若发现Server接收不到Client 端发来的包，即没有任何输出，请检查是不是Client 端发的数据包大小大于Server端网卡设置的MTU值。当不设置-l的时候，Client端默认发送的数据包大小为1470. 4.2 Netperf一、TCP测试12345## 主机一# netserver -p 9991 # 指定端口## 主机二# netperf -H 10.0.0.8 -p 9991 # 缺省TCP批量传输，即 -t TCP_STREAM# netperf -H 10.0.0.8 -p 9991 -- -m 1024 二、UDP 测试1# netperf -t UDP_STREAM -H 10.0.0.8 -p 9991 -- -m 1024 note: 不同于iPerf, Netperf测试UDP数据包无需在服务器端指定参数，所以，不用重启服务器，只需要在客户端上加上 -t UDP_STREAM","categories":[{"name":"SDN","slug":"SDN","permalink":"http://shizhonggan.github.io/categories/SDN/"}],"tags":[{"name":"性能测试","slug":"性能测试","permalink":"http://shizhonggan.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"},{"name":"iPerf","slug":"iPerf","permalink":"http://shizhonggan.github.io/tags/iPerf/"},{"name":"Netperf","slug":"Netperf","permalink":"http://shizhonggan.github.io/tags/Netperf/"}]},{"title":"[阅读] Few-Shot Adversarial Domain Adaptation","slug":"Paper/Few-ShotAdversarialDomainAdaptation","date":"2021-04-14T13:54:23.000Z","updated":"2021-04-16T00:42:51.206Z","comments":true,"path":"2021/04/14/Paper/Few-ShotAdversarialDomainAdaptation/","link":"","permalink":"http://shizhonggan.github.io/2021/04/14/Paper/Few-ShotAdversarialDomainAdaptation/","excerpt":"","text":"参考资料： Github Code: https://github.com/Coolnesss/fada-pytorch[作者源程序] Github Code: https://github.com/xzsl/FewShotPapers[源程序，包含数据源，参考文献] http://blog.leanote.com/post/wuvin/1f36d3173608 https://blog.csdn.net/Adupanfei/article/details/85164925 https://github.com/topics/domain-adaptation","categories":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://shizhonggan.github.io/categories/Deep-Learning/"}],"tags":[{"name":"Few-shot Learning","slug":"Few-shot-Learning","permalink":"http://shizhonggan.github.io/tags/Few-shot-Learning/"},{"name":"Semi-Supervised Learning","slug":"Semi-Supervised-Learning","permalink":"http://shizhonggan.github.io/tags/Semi-Supervised-Learning/"}]},{"title":"软件定义网络（SDN）学习笔记(0)--wireshark抓包分析","slug":"SDN/SDN00_wireshark","date":"2021-04-09T07:36:22.000Z","updated":"2021-04-20T08:45:23.687Z","comments":true,"path":"2021/04/09/SDN/SDN00_wireshark/","link":"","permalink":"http://shizhonggan.github.io/2021/04/09/SDN/SDN00_wireshark/","excerpt":"","text":"SDN学习目录 SDN学习笔记(0)–wireshark抓包分析 SDN学习笔记(1)–iPerf和Netperf性能测试 SDN学习笔记(2)–Scapy交互式数据处理与Postman HTTP请求测试 SDN学习笔记(3)–OVS系统架构 简单网络命令1. ifconfigifconfig用于显示、设置、启动和停止网络设备。通过此命令能够显示出正在使用的计算机的IP地址、子网掩码和默认网关等。当网络环境发生改变时可通过此命令对网络进行相应的配置。ifconfig命令的格式和参数解释如下： 命令格式：ifconfig [网络设备] [参数] 命令参数如下表所示： 1234567891011121314151617181920212223242526272829303132333435# ifconfig # 查看网络设备信息eth0 Link encap:Ethernet HWaddr fa:16:3e:22:f1:7c inet addr:30.0.0.96 Bcast:30.0.0.255 Mask:255.255.255.0 inet6 addr: fe80::f816:3eff:fe22:f17c/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1450 Metric:1 RX packets:2402 errors:0 dropped:0 overruns:0 frame:0 TX packets:2390 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:190993 (190.9 KB) TX bytes:4116702 (4.1 MB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:16 errors:0 dropped:0 overruns:0 frame:0 TX packets:16 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:880 (880.0 B) TX bytes:880 (880.0 B)eth0表示第一块网卡。HWaddr表示网卡的物理地址即MAC地址。inet addr表示网卡的IPv4地址。inet6 addr表示网卡的IPv6地址。Bcast表示网卡的广播地址。Mask表示子网掩码地址。UP表示网卡开启状态。RUNNING表示网卡的网线被接上。MULTICAST表示支持组播。MTU表示最大传输单元。RX packets、TX packets表示接收、发送数据包情况统计。RX byte、TX bytes表示接收、发送数据字节数统计信息。lo表示主机的回环地址。一般是用来测试一个网络程序时又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口，比如把httpd服务器指定到回坏地址后，在浏览器输入127.0.0.1就能看到你所架WEB网站，但只有您能看得到，局域网的其它主机或用户无从知道。# ifconfig eth0 down # 关闭网卡# ifconfig eth0 up # 开启网卡# ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255 # 配置IP地址等信息 note: 机器重启后，配置的IP地址就失效了，若想将配置信息永久地存的电脑里，需要修改网卡的配置文件。 2. pingping命令用于检查网络是否通畅和网络连接速度。简单地说，网络上的机器都有唯一确定的IP地址，给目标IP地址发送一个数据包，就会返回一个同样大小的数据包，根据返回的数据包可以确定目标主机是否存在，可以初步判断网络是否通畅以及连接速度等信息。根据数据包返回时间和丢包率，可以大致判断出网络是否稳定。Ping的返回异常信息有“Request Timed Out”、“Destination Net Unreachable”、“Bad IP address”和“Source quench received”：（1） Request Timed Out表示对方主机可以到达但是连接超时，这种情况通常是对方拒绝接收你发给它的数据包而造成的数据包丢失。原因可能是对方装有防火墙。（2） Destination Net Unreachable表示对方主机不存在或者没有跟对方建立连接。（3） Bad IP address表示可能没有连接到DNS服务器所以无法解析这个IP地址，也可能是IP地址不存在。（4） Source quench received表示对方或中途的服务器繁忙无法回应。说明：“destination host unreachable”和“time out”的区别：如果所经过的路由器的路由表中具有到达目标的路由，而目标因为其它原因不可到达，这时候会出现“time out”，如果路由表中连到达目标的路由都没有，那就会出现“destination host unreachable”。ping命令的格式和参数解释如下： 命令格式：ping [参数] [主机名或IP地址] 命令参数如下表所示： 12# ping 127.0.0.1 ## ping -c 5 www.xxx.com # -c 5表示在发送5个数据包后停止。 note1: ping本网网关或本网IP地址，可以检查硬件设备是否有问题，也可以检查本机与本地网络连接是否正常（在非局域网中这一步骤可以忽略）。 3. traceroute命令traceroute是用来显示源主机到目标主机之间所经过的网关的命令。traceroute命令用IP生存时间（TTL）字段和ICMP错误消息来确定从一个主机到网络上其他主机的路由。首先，traceroute发送一个TTL是1的IP数据包到目的地，当路径上的第一个路由器收到这个数据包时，TTL将会减1。此时，TTL变为0，所以该路由器会将此数据包丢掉，并返回一个ICMP time exceeded消息（包括发IP包的源地址，IP包的所有内容及路由器的IP地址）。traceroute收到这个消息后，便知道这个路由器存在于路径上，接着traceroute再发送一个TTL是2的数据包，继而发现第2个路由器。依此规律，traceroute每次将发送的数据包的TTL加1来发现下一个路由器，一直持续到某个数据包抵达目的地。当数据包到达目的地后，该主机则不会返回ICMP time exceeded消息，此时traceroute通过UDP数据包向不常见端口（30000以上）发送数据包，因此会收到ICMP port unreachable消息，故可判断到达目的地。traceroute命令的格式和参数解释如下： 命令格式：traceroute [参数] [主机] 命令参数如下表所示： 12345# sudo su# apt-get install traceroute # 安装# traceroute www.baidu.com # 追踪网络数据包的路由途径，执行结果如下图所示# traceroute -m 10 www.baidu.com # 设置路由追踪10条，即只发回通过10个网关的信息# traceroute -w 3 www.baidu.com # 把对外发探测包的等待响应时间设置为3秒 4. route命令route用于显示和操作IP路由表，它的主要作用是创建静态路由。在Linux系统中，设置路由通常是为了解决以下问题：Linux系统在一个局域网中，局域网中有一个网关，若要让机器访问Internet，那么就需要将网关的IP地址设置为Linux机器的默认路由。route命令的格式和参数解释如下： 命令格式：route [-f] [-p] [command] [destination] [mask netmask] [gateway] [metric] [if interface] 命令参数如下表所示: 12345678# routeopenlab@openlab:~/Desktop$ routeKernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Ifacedefault 30.0.0.1 0.0.0.0 UG 0 0 0 eth0default 30.0.0.1 0.0.0.0 UG 100 0 0 eth030.0.0.0 * 255.255.255.0 U 0 0 0 eth0169.254.169.254 30.0.0.1 255.255.255.255 UGH 0 0 0 eth0 Destination：表示目标网段或主机。 Gateway：表示网关地址，“*”表示目标是本主机所属的网络，不需要路由。 Genmask：表示网络掩码。 Flags：表示标记。常用标记如下： U表示路由是活动的 H表示目标是一个主机 G表示路由指向网关 R表示恢复动态路由产生的表项 D表示由路由的后台程序动态地安装 M表示由路由的后台程序修改 ！表示拒绝路由。 Metric：表示路由距离，到达指定网络所需的中转数（Linux内核中没有使用）。 Ref：表示路由项引用次数（Linux内核中没有使用）。 Use：表示此路由项被路由软件查找的次数。 Iface：表示该路由表项对应的输出接口。123456# route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0 # 添加网关# route del -net 224.0.0.0 netmask 240.0.0.0# route add -net 192.168.62.0 netmask 255.255.255.0 gw 192.168.1.1 # 添加一条路由(发往192.168.62这个网段的全部要经过网关192.168.1.1)# route del -net 192.168.122.0 netmask 255.255.255.0 # 删除一条路由 删除的时候不用写网关 5. IPip命令用来显示或操纵Linux主机的路由、网络设备、策略路由和隧道，是Linux下较新的功能强大的网络配置工具。它能够替代一些传统的网络管理工具，例如ifconfig、route等，使用权限为超级用户，ip命令的格式和参数解释如下： 命令格式：ip [OPTIONS] OBJECT [COMMAND [ARGUMENTS]] 命令参数：OPTIONS是一些修改ip行为或者改变其输出的选项。所有的选项都是以-字符开头，分为长、短两种形式。12345# ip link list # 查看网络设备的运行状态1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:002: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000 link/ether fa:16:3e:50:89:7f brd ff:ff:ff:ff:ff:ff lo表示主机的回环地址。 eth0表示第一块网卡。 UP表示网卡开启状态。 MULTICAST表示支持组播。 mtu表示最大传输单元。 link/ether表示MAC地址。12345678910111213# ip -s link list # 查看更加详细的网络设备信息1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 RX: bytes packets errors dropped overrun mcast 880 16 0 0 0 0 TX: bytes packets errors dropped carrier collsns 880 16 0 0 0 0 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000 link/ether fa:16:3e:50:89:7f brd ff:ff:ff:ff:ff:ff RX: bytes packets errors dropped overrun mcast 378682 3605 0 0 0 0 TX: bytes packets errors dropped carrier collsns 2422264 2317 0 0 0 0 RX packets、TX packets表示接收、发送数据包情况统计。 RX bytes、TX bytes表示接收、发送数据字节数统计信息。1234# ip addr list # 查看ip信息# ip link set eth0 down # ip link list命令# ip link set eth0 up # 开启eth0网卡# route add default gw 30.0.1.1 # 设置网关 inet表示网卡的IPv4地址。 inet6表示网卡的IPv6地址。 note: 使用ip命令关闭网卡后，默认路由也被删除了，而使用ip命令启用网卡时，并不会配置路由，所以将无法ping通公网地址，故需要配置路由。 6. netstat命令netstat是一个监控TCP/IP网络的非常有用的命令，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。它用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。另外它还能列出处于监听状态（即等待接入请求）的套接字。如果你想确认系统上的Web服务有没有起来，你可以查看80端口有没有打开。netstat命令的格式和参数解释如下： 命令格式：netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][—ip] 命令参数如下表所示：1234# netstat -a # 查看所有端口信息# netstat -at # 查看TCP连接# netstat -l # 查看所有处于监听状态的Sockets# netstat -ap | grep ssh # 查看程序运行的端口 7. tcpdump命令tcpdump是根据使用者的定义对网络上的数据包进行截获的包分析工具。tcpdump凭借强大的功能和灵活的截取策略，成为类UNIX系统下用于网络分析和问题排查的首选工具。tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤。 命令格式：tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ][ -i 网络接口 ] [ -r 文件名] [ -s snaplen ][ -T 类型 ] [ -w 文件名 ] [表达式 ] 命令参数： tcpdump命令常用参数如下： 123456# tcpdump -i eth0 # 进行抓包# ping www.xxxx.com # 在打开一个窗口进行网络请求,可看到抓包信息# tcpdump -i eth0 tcp port 80 # 抓取端口为80的TCP协议的数据信息# tcpdump-i eth0 tcp # 抓取TCP协议的数据信息，并访问网址：www.xxx.com# tcpdump -i eth0 -w tcpdump_package.pcap # 该命令作用是将tcupdump抓到的网络包保存到tcpdump_package.pcap文件中，命名规则为：文件名.pcap。# tcpdump -r tcpdump_package.pcap # 该命令作用是将保存在tcpdump_package.pacp中的抓包信息读取出来。 练习题下面（B）命令用于测试网络是否连通。 A. ifconfig B. ping C. ftp D. route 下列相关route命令的使用错误的是（B） A. 添加路由：route add-net 192.168.1.0 netmask - 255.255.255.0 gw 192.168.1.1 B. 删除路由：route del-net 192.168.1.0 C. 添加默认网关：route add default gw 192.168.120.240 D. 添加路由：route add-net 192.168.1.0/24 dev eth0 下面输出信息解释错误的是（D） A. HWaddr表示网卡的物理地址即MAC地址。 B. inet addr表示网卡的IP地址。 C. MTU表示最大传输单元。 D. RX packets、TX packets表示接收、发送数据字节数统计信息。 判断： 使用ifconfig命令配置主机信息后，信息将永久保存在电脑里。× 判断： traceroute -m 4 www.xxx.com表示只发回通过4个网关的信息。√ 下列关于ip命令理解错误的是（B） A. ip命令用来显示或操纵Linux主机的路由、网络设备、策略路由和隧道，它能够替代一些传统的网络管理工具，例如ifconfig、route等。 B. ip命令支持的操作有add、delete、show和link。 C. 可以使用ip addr add 192.168.17.30/24 dev eth0命令给主机配置IP地址。 D. 使用ip命令的neighbour选项，可以查看接入你所在的局域网的设备的MAC地址。 关于tcpdump命令理解错误的是（B） A. tcpdump支持对网络层、协议、主机、网络或端口的过滤。 B. tcpdump -i eth1 ‘((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host 192.168.1.200)))’，表示抓取所有经过eth1，目的地址是192.168.1.254和192.168.1.200，端口是80的TCP数据。 C. 不带任何选项的tcpdump，默认会抓取第一个网络接口，且只有将tcpdump进程终止才会停止抓包。 D. 表达式单元之间可以使用操作符” and / &amp;&amp; / or / || / not / ! “进行连接，从而组成复杂的条件表达式。 下面对netstat的输出结果理解正确的是（D） A. Active Internet connections表示TCP连接；Active UNIX domain sockets表示Unix域套接口。 B. State：表示连接状态，LISTENING表示正在侦听端口，等待建立连接。 C. Proto：表示使用的通信协议。 D. 以上均正确 判断： netstat是一个网络连接端扫描软件，用来扫描电脑上开放的端口，确定哪些服务运行在哪些端口，并且推断出计算机运行的操作系统。× 判断： 使用括号”()”可以改变tcpdump的表达式的优先级 √ Wireshark抓包分析工具Wireshark是一个免费开源的网络数据包分析软件。用于截取网络数据包并尽可能显示出最为详细的网络数据包数据。为了安全考虑，Wireshark只能查看封包，而不能修改封包的内容，或者发送封包。Wireshark能够对大部分局域网协议进行解析，具有界面简单、操作方便、实时显示捕获数据的优点。Wireshark不是入侵侦测系统，对于网络上的异常流量行为，Wireshark不会产生警示或是任何提示。然而，仔细分析Wireshark撷取的封包能够帮助使用者对于网络行为有更清楚的了解。Wireshark的用途很广，网络管理员可以使用Wireshark来检测网络问题，网络安全工程师可以使用Wireshark来检查资讯安全相关问题，开发者可以使用Wireshark来为新的通讯协议除错，普通使用者可以使用Wireshark来学习网络协议的相关知识。在使用Wireshark工具时，可以按如下流程进行： 确定Wireshark的位置。即在哪执行wireshark命令，如果没有一个正确的位置，启动Wireshark后会花费很长的时间捕获一些与自己无关的数据。 选择捕获接口。一般都是选择连接到Internet网络的接口，这样才可以捕获到与网络相关的数据。否则，捕获到的其它数据对自己也没有任何帮助。 使用捕获过滤器。通过设置捕获过滤器，可以避免产生过大的捕获文件。这样用户在分析数据时，也不会受其它数据干扰。而且，还可以为用户节约大量的时间。 使用显示过滤器。通常使用捕获过滤器过滤后的数据，往往还是很复杂。为了使过滤的数据包再更细致，此时使用显示过滤器进行过滤。 使用着色规则。通常使用显示过滤器过滤后的数据，都是有用的数据包。如果想更加突出的显示某个会话，可以使用着色规则高亮显示。 构建图表。如果用户想要更明显的看出一个网络中数据的变化情况，使用图表的形式可以很方便的展现数据分布情况。 重组数据。Wireshark的重组功能，可以重组一个会话中不同数据包的信息，或者是一个重组一个完整的图片或文件。由于传输的文件往往较大，所以信息分布在多个数据包中。为了能够查看到整个图片或文件，这时候就需要使用重组数据的方法来实现。环境 控制器：Ubuntu14.03桌面版,Floodlight1.0;CPU:1,内存:2GB,磁盘:20GB 交换机：Ubuntu14.03桌面版,OVS2.3.1;CPU:1,内存:2GB,磁盘:20GB 基本使用步骤12# apt-get install wireshark # root用户下安装$ sudo wireshark # 普通用户下打开wireshark主界面，这里权限的问题，root打不开，普通用户无法获得网卡 步骤 1 选择需要抓包的网卡Wireshark是捕获机器上的某一块网卡的网络包，当你的机器上有多块网卡的时候，你需要选择一个网卡，请按下面的方式选择网卡： 方式一：选择网卡“eth0”，单击开始按钮 方式二：1)在菜单栏选择”Capture -&gt; Interfaces”，进入选择网卡的页面;2)选择网卡“eth0”，单击“Start”，进入抓包页面 步骤 2 单击浏览器图标，打开浏览器，在浏览器上访问www.sina.com.cn，进行抓包步骤 3 单击红色停止按钮停止抓包，抓包结果如下图所示 图中四个区域分别为： 为DISPLAY FILTER（显示过滤器），显示过滤器用于查找捕捉记录中的内容。 为PACKET LIST PANE（封包列表），封包列表中显示所有已经捕获的封包。可以看到发送或接收方的MAC/IP地址、TCP/UDP端口号、协议或封包的内容。 为PACKET DETAILS PANE（封包详细信息）：这里显示的是在封包列表中被选中项目的详细信息。 为DISSECTOR PANE（16进制数据）：“解析器”在Wireshark中也被叫做“16进制数据查看面板”。这里显示的内容与“封包详细信息”中相同，只是改为以16进制的格式表述。 步骤 4 根据抓包结果，分析抓包数据 在封包列表部分选择一条TCP协议数据，如下图所示。 在封包列表部分选择一条TCP协议数据，如下图所示。 图中： Frame：表示物理层数据帧概况。 Ethernet II：表示数据链路层以太网帧头部信息。 Internet Protocol Version 4：表示互联网IP包头信息。 Transmission Control Protocol：表示传输层数据段头部信息，此处为TCP。 图中： 数据链路层显示有源MAC地址，目的MAC地址。 网络层IP的版本信息显示为IPv4。协议为TCP。源IP地址30.0.0.93即本机IP地址，目的IP地址10.168.16.15即远端服务器地址。 源端口为5901，目的端口为52356。 步骤 5 过滤报文信息 过滤源IP地址 如查找源地址为30.0.0.93的报文，则在过滤框中输入ip.src==30.0.0.93进行过滤 过滤目的IP地址 如查找目的地址为10.168.16.15的报文，则在过滤框中输入ip.dst==10.168.16.15进行过滤 过滤端口 如过滤52356端口，则在过滤框中输入tcp.port==52356||udp.port==52356 过滤协议 如过滤TCP的协议，则在过滤框中输入协议名tcp进行过滤 使用连接符and过滤。 过滤两种条件时，使用and连接，如过滤ip为30.0.0.93并且为TCP协议的报文，则在过滤框中输入ip.src==30.0.0.93 and tcp进行过滤，如下图所示。步骤 6 保存Wireshark抓包数据。 捕获的数据信息可以保存在文件中，这样就可以随时在Wireshark中打开此文件进行分析，而无需再次捕获同样的数据。关闭数据捕获屏幕或退出Wireshark时，系统会提示你保存信息 练习题下面关于Wireshark说法错误的是（D） A. 捕获过滤器用来过滤捕获的封包，以免捕获太多的记录。 B. 封包列表中显示所有已经捕获的封包。可以看到发送或接收方的MAC/IP地址、TCP/UDP端口号、协议或封包的内容。 C. 显示过滤器用来告诉Wireshark只显示那些符合过滤条件的数据包。 D. Wireshark能够对大部分局域网协议进行解析，能够查看、修改封包的内容，具有界面简单、操作方便、实时显示捕获数据的优点。 下面关于Wireshark的过滤表达式描述错误的是（B） A. 过滤ip为10.0.1.1并且为http协议的报文，表达式为：ip.src==10.0.1.1 and http。 B. 如果没有特别指明来源或目的地，则默认使用源地址进行过滤。 C. 否(“not”)具有最高的优先级，或(“or”)和与(“and”)具有相同的优先级，运算时从左至右进行。 D. 对目的地址为192.168.0.1的包的过滤，表达式为：ip.dst eq 192.168.0.1。 判断：封包列表的面板中显示：编号、时间戳、源地址、目标地址、协议、长度以及封包信息，不同的协议用了不同的颜色显示，也可以自己修改这些显示的颜色规则。 √ 判断：Wireshark的捕捉过滤器支持协议过滤和内容过滤。×","categories":[{"name":"SDN","slug":"SDN","permalink":"http://shizhonggan.github.io/categories/SDN/"}],"tags":[{"name":"性能测试","slug":"性能测试","permalink":"http://shizhonggan.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"},{"name":"网络","slug":"网络","permalink":"http://shizhonggan.github.io/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"Hexo markdown 插入图片解决方法","slug":"HexoStudy/HexoImageFile","date":"2021-04-07T12:41:21.000Z","updated":"2021-04-09T00:58:36.080Z","comments":true,"path":"2021/04/07/HexoStudy/HexoImageFile/","link":"","permalink":"http://shizhonggan.github.io/2021/04/07/HexoStudy/HexoImageFile/","excerpt":"","text":"前言官方解决办法： https://hexo.io/zh-cn/docs/asset-folders.html 我尝试了一下这个官方办法，并未成功。于是，不得不尝试大家推荐的“图床”办法。 “图床”即第三方存储图片的地方，并能支持http/https协议以提供图片访问链接。减轻本地服务器空间，加快图片打开速度。 提供图床的第三方网站众多。出于对安全、网站服务能力的考量，建议采用gitee 作为图片托管仓库。 具体方法 新建仓库 仓库下新建index.html，此时service 里便出现gitee pages功能 点击gitee pages进入设置，直接默认确定即可，然后出现该网页链接地址 url 克隆到本地,然后将你需要的图片放到该目录下 push到仓库 于是，可以通过url+path的方式访问图片 markdown可以直接使用 温馨提示1：图要加水印 温馨提示2：gitee每次更新都要进入service-&gt;gitee page-&gt;update","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://shizhonggan.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://shizhonggan.github.io/tags/Hexo/"},{"name":"前端","slug":"前端","permalink":"http://shizhonggan.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Gitalk 评论登录出现403 解决方法","slug":"HexoStudy/Gitalk403Solution","date":"2021-04-07T11:22:12.000Z","updated":"2021-04-09T01:07:43.672Z","comments":true,"path":"2021/04/07/HexoStudy/Gitalk403Solution/","link":"","permalink":"http://shizhonggan.github.io/2021/04/07/HexoStudy/Gitalk403Solution/","excerpt":"","text":"起因网络受限 本篇文章参考：https://cuiqingcai.com/30010.html 问题二Related Issues not found Please contact @ShizhongGan to initialize the comment 解决方法 用代理啊 换其他的","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://shizhonggan.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://shizhonggan.github.io/tags/hexo/"},{"name":"gitalk","slug":"gitalk","permalink":"http://shizhonggan.github.io/tags/gitalk/"}]},{"title":"vs code 实用扩展插件","slug":"Tips/vscode_tips","date":"2021-04-07T06:32:06.000Z","updated":"2021-04-09T01:06:41.360Z","comments":true,"path":"2021/04/07/Tips/vscode_tips/","link":"","permalink":"http://shizhonggan.github.io/2021/04/07/Tips/vscode_tips/","excerpt":"","text":"Angular 8 and TypeScript/HTML VS Code Snippets Awesome Flutter Snippets Chinese (Simplified) Language Pack for Visual Studio Code Code Runner Code Spell Checker Dart Docker Draw.io Integration Flutter Graphviz Interactive Preview HTML Boilerplate Jupyter LaTeX Workshop Live Server Markdown All in One Markdown Mind Map Preview Markdown PDF Markdown+Math Office Viewer open in browser PlantUML python reStructuredText","categories":[{"name":"Tips","slug":"Tips","permalink":"http://shizhonggan.github.io/categories/Tips/"}],"tags":[{"name":"vs code插件","slug":"vs-code插件","permalink":"http://shizhonggan.github.io/tags/vs-code%E6%8F%92%E4%BB%B6/"}]},{"title":"Gitee部署Hexo 博客","slug":"HexoStudy/HexoGiteeDeploy","date":"2021-04-07T01:21:46.000Z","updated":"2021-04-09T00:58:39.961Z","comments":true,"path":"2021/04/07/HexoStudy/HexoGiteeDeploy/","link":"","permalink":"http://shizhonggan.github.io/2021/04/07/HexoStudy/HexoGiteeDeploy/","excerpt":"","text":"前言由于网络限制，Github部署Hexo博客加载速度慢，因此建议采用gitee进行部署。 部署方法 注册gitee账号 新建公开仓库 访问地址不带二级目录设置：如果你想你的 pages 首页访问地址不带二级目录，如ipvb.gitee.io，你需要建立一个与自己个性地址同名的项目，如 gitee.com/ipvb 这个用户，想要创建一个自己的站点，但不想以子目录的方式访问，想以ipvb.oschina.io直接访问，那么他就可以创建一个名字为ipvb的项目 gitee.com/ipvb/ipvb 部署完成后，就可以以 ipvb.gitee.io 进行访问了。 设置hexo _config.yml文件，绑定该新建的仓库 hexo d部署 该仓库的service出现gitee page功能，点击进去默认确定即可 然后通过ipvb.gitee.io即可访问 温馨提示：每次hexo d部署完，都要进入gitee page功能中update，否则无法看到网页变化。github不需要。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://shizhonggan.github.io/categories/Hexo/"}],"tags":[{"name":"Gitee","slug":"Gitee","permalink":"http://shizhonggan.github.io/tags/Gitee/"},{"name":"Hexo","slug":"Hexo","permalink":"http://shizhonggan.github.io/tags/Hexo/"}]},{"title":"Hexo 快速搭建静态博客","slug":"HexoStudy/HexoStudy","date":"2021-04-06T02:26:34.000Z","updated":"2021-04-09T00:59:12.840Z","comments":true,"path":"2021/04/06/HexoStudy/HexoStudy/","link":"","permalink":"http://shizhonggan.github.io/2021/04/06/HexoStudy/HexoStudy/","excerpt":"","text":"环境准备12# 设置npm环境npm config set registry https://registry.npm.taobao.org 1ssh-keygen -t rsa -C &quot;gan_shizhong@163.com&quot; 12345678910# install pluginnpm install hexo-wordcount --savenpm install hexo-generator-json-content --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --savenpm install hexo-neat --save# npm install hexo-translate-title --save 12345安装Hexonpm install -g hexo-clinpm install hexonpm install hexo-deployer-git --save 发布文章1hexo new page &quot;文件名&quot;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://shizhonggan.github.io/categories/Hexo/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://shizhonggan.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"hexo","slug":"hexo","permalink":"http://shizhonggan.github.io/tags/hexo/"},{"name":"gitalk","slug":"gitalk","permalink":"http://shizhonggan.github.io/tags/gitalk/"}]}],"categories":[{"name":"运维","slug":"运维","permalink":"http://shizhonggan.github.io/categories/%E8%BF%90%E7%BB%B4/"},{"name":"Tips","slug":"Tips","permalink":"http://shizhonggan.github.io/categories/Tips/"},{"name":"Docker","slug":"Docker","permalink":"http://shizhonggan.github.io/categories/Docker/"},{"name":"SDN","slug":"SDN","permalink":"http://shizhonggan.github.io/categories/SDN/"},{"name":"Python","slug":"Python","permalink":"http://shizhonggan.github.io/categories/Python/"},{"name":"SQL","slug":"SQL","permalink":"http://shizhonggan.github.io/categories/SQL/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://shizhonggan.github.io/categories/Deep-Learning/"},{"name":"Hexo","slug":"Hexo","permalink":"http://shizhonggan.github.io/categories/Hexo/"}],"tags":[{"name":"paramiko","slug":"paramiko","permalink":"http://shizhonggan.github.io/tags/paramiko/"},{"name":"python","slug":"python","permalink":"http://shizhonggan.github.io/tags/python/"},{"name":"DevOps","slug":"DevOps","permalink":"http://shizhonggan.github.io/tags/DevOps/"},{"name":"Docker","slug":"Docker","permalink":"http://shizhonggan.github.io/tags/Docker/"},{"name":"网络架构","slug":"网络架构","permalink":"http://shizhonggan.github.io/tags/%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/"},{"name":"SDN","slug":"SDN","permalink":"http://shizhonggan.github.io/tags/SDN/"},{"name":"OVS","slug":"OVS","permalink":"http://shizhonggan.github.io/tags/OVS/"},{"name":"OOP","slug":"OOP","permalink":"http://shizhonggan.github.io/tags/OOP/"},{"name":"Scapy","slug":"Scapy","permalink":"http://shizhonggan.github.io/tags/Scapy/"},{"name":"Postman","slug":"Postman","permalink":"http://shizhonggan.github.io/tags/Postman/"},{"name":"游标","slug":"游标","permalink":"http://shizhonggan.github.io/tags/%E6%B8%B8%E6%A0%87/"},{"name":"性能测试","slug":"性能测试","permalink":"http://shizhonggan.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"},{"name":"iPerf","slug":"iPerf","permalink":"http://shizhonggan.github.io/tags/iPerf/"},{"name":"Netperf","slug":"Netperf","permalink":"http://shizhonggan.github.io/tags/Netperf/"},{"name":"Few-shot Learning","slug":"Few-shot-Learning","permalink":"http://shizhonggan.github.io/tags/Few-shot-Learning/"},{"name":"Semi-Supervised Learning","slug":"Semi-Supervised-Learning","permalink":"http://shizhonggan.github.io/tags/Semi-Supervised-Learning/"},{"name":"网络","slug":"网络","permalink":"http://shizhonggan.github.io/tags/%E7%BD%91%E7%BB%9C/"},{"name":"Hexo","slug":"Hexo","permalink":"http://shizhonggan.github.io/tags/Hexo/"},{"name":"前端","slug":"前端","permalink":"http://shizhonggan.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"hexo","slug":"hexo","permalink":"http://shizhonggan.github.io/tags/hexo/"},{"name":"gitalk","slug":"gitalk","permalink":"http://shizhonggan.github.io/tags/gitalk/"},{"name":"vs code插件","slug":"vs-code插件","permalink":"http://shizhonggan.github.io/tags/vs-code%E6%8F%92%E4%BB%B6/"},{"name":"Gitee","slug":"Gitee","permalink":"http://shizhonggan.github.io/tags/Gitee/"}]}